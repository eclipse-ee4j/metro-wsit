#
# Copyright (c) 2010, 2022 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Distribution License v. 1.0, which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: BSD-3-Clause
#

#Logging Error codes

#### Errors and exceptions (1-1000)
WSSC0001.error.marshal.log=WSSC0001:Error in Marshalling RSTR to string for logging.  Could be a problem in the well formedness of XML in the message.

WSSC0002.null.token=WSSC0002: Invalid (null) security token and proof token. RST does not contain a valid token.

WSSC0003.invalid.prooftoken=WSSC0003:Invalid Proof Token Type: {0}. Accepted types are computed key type and Binary Secret type.

# Format should not be changed. Letters can be translated but the user should known that java.text.SimpleDateFormat is responsible for formatting (meaning of symbols can be found at http://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html).
WSSC0004.parse.exception=WSSC0004:Invalid created or expires dates encountered. Accepted date format is yyyy-MM-dd'T'HH:mm:ss'.'SSS'Z'

WSSC0005.computed.keysize=WSSC0005:Computed keySize: {0}. Default keySize value {1}.

WSSC0006.unabletoextract.key=WSSC0006:Unable to extract P-SHA1 key.

WSSC0007.created.rstr=WSSC0007:Created RSTR for client initiated issued token context: {0}.

# {0} - URI (most likely not valid)
WSSC0008.urisyntax.exception=WSSC0008:Could not create URI for {0}.

WSSC0009.clientEntropy.value=WSSC0009:Client entropy value is {0}.

WSSC0010.clientEntropy.cannot.null=WSSC0010:Client entropy cannot be null when RequireClientEntropy is not enabled.

WSSC0011.keySize.value=WSSC0011:KeySize value is {0}. Default is {1}.

WSSC0012.compute.seckey=WSSC0012:There was a problem in computing secret key.

WSSC0013.cannot.create.rstr.response=WSSC0013:Cannot create RSTR Response.

WSSC0014.rstr.response=WSSC0014:Generated RSTR Response: {0}.

WSSC0015.unknown.context=WSSC0015:Unknown security context token to cancel: {0}.  Either the context is not found or it does not contain a valid token.

WSSC0016.problem.mar.unmar=WSSC0016:Problem creating JAXB Marshaller/Unmarshaller from JAXBContext. Check if the JAXBcontext has been initialized properly.

WSSC0017.problem.add.address.headers:WSSC0017:Problem adding Addressing Headers.

# RSTR = Request Security Token Response.
WSSC0018.err.jaxb.rstr=WSSC0018:Error reading RSTR Payload as JAXB element. Perhaps the RSTR element does not conform to RSTR schema as expected by JAXB.

WSSC0019.err.token.value=WSSC0019:There was an error extracting TokenValue.

WSSC0020.problem.creating.rstr=WSSC0020:There was a problem creating RSTR. Could be while handling an RSTR returned by the Issuer and extracting Token information to set into the IssuedTokenContext.

WSSC0021.problem.creating.rst.Trust=WSSC0021:There was a problem in the trust layer creating RST. Could not create RST from JAXBElement with the given request type, token type and client entropy.

WSSC0022.problem.creating.fault=WSSC0022:There was a problem creating SOAP Fault. Check if SOAPBody contains a fault string.

WSSC0024.error.creating.rst=WSSC0024:There was a problem creating RST {0}. There could be a problem with creating the binary secret, or client entropy.

WSSC0025.problem.printing.msg=WSSC0025:Problem printing message. Could be a problem in the well formedness of XML in the message.

WSSC0026.unsupported.computed.key.E=WSSC0026:Unsupported computed Key algorithm {0}.
WSSC0026.unsupported.computed.key=WSSC0026:Unsupported computed Key algorithm {0}. Should be P-SHA1.

#### Info messages, Warnings and Fine grained information
#### These codes start from 1000+ onwards
WSSC1001.null.itCtx.for.session=WSSC1001: Null security context for session context id {0}.

WSSC1002.null.sessionCtxId.askey=WSSC1002: Attempt to use null security context id as Map key.

WSSC1003.setting.times=WSSC1003:Setting creation time : {0} and expiration time: {1}

WSSC1004.secctx.token.id.value=WSSC1004:Setting Security Context token id value to {0}.

WSSC1005.secctx.token.wsuid.value=WSSC1005:Setting Security Context token wsuId to {0}.

WSSC1006.sym.bin.keysize=WSSC1006:Symmetric Binding KeySize: {0}. Default {1}.

WSSC1008.set.ep.address=WSSC1008:Setting endpoint address: {0}.

WSSC1009.send.req.message=WSSC1009:Generating send request message: {0}.

# {0} - URI (token identifier)
WSSC1010.creating.session=WSSC1010:Creating session for : {0}.

WSSC1011.created.sct.rst.issue=WSSC1011:Created RST for Issue:\n {0}.

WSSC1012.received.sct.rstr.issue=WSSC1012:Received RSTR for Issue:\n {0}.

WSSC1013.created.sct.rst.renew=WSSC1013:Created RST for Renew:\n {0}.

WSSC1014.received.sct.rstr.renew=WSSC1014:Received RSTR for Renew:\n {0}.

WSSC1015.created.sct.rst.cancel=WSSC1015:Created RST for Cancel:\n {0}.

WSSC1016.received.sct.rstr.cancel=WSSC1016:Received RSTR for Cancel:\n {0}.
