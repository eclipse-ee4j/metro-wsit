#
# Copyright (c) 2010, 2022 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Distribution License v. 1.0, which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: BSD-3-Clause
#

#### Logging Error codes

WST0001.unsupported.proofToken.type=WST0001: \u4E0D\u652F\u63F4\u670D\u52D9 {1} \u7684\u8B49\u660E\u8A18\u865F\u985E\u578B {0}. \u63A5\u53D7\u8A08\u7B97\u91D1\u9470\u985E\u578B\u548C\u4E8C\u9032\u4F4D\u5BC6\u78BC\u985E\u578B.

WST0002.fail.marshal.tosource=WST0002: \u5C07 {0} \u5C01\u9001\u8655\u7406 (Marshal) \u81F3\u300C\u4F86\u6E90\u300D\u6642\u767C\u751F\u932F\u8AA4.

WST0003.error.creating.wstrustfact=WST0003: \u5EFA\u7ACB WSTrustElementFactory \u6642\u767C\u751F\u932F\u8AA4.

WST0004.unknown.serviceprovider=WST0004: \u4E0D\u660E\u7684\u76EE\u6A19\u670D\u52D9\u63D0\u4F9B\u8005 {0}.\u300CSTS \u7D44\u614B\u300D\u672A\u5305\u542B\u670D\u52D9\u7684\u63CF\u8FF0\u8CC7\u6599.

WST0005.classnotfound.null.contract=WST0005: \u7121\u6CD5\u53D6\u5F97\u4FE1\u4EFB\u5408\u7D04, \u56E0\u70BA\u627E\u4E0D\u5230\u985E\u5225 {0}.

WST0006.fail.rst.source=WST0006: \u7121\u6CD5\u5F9E\u4F86\u6E90 {0} \u5EFA\u7ACB RST.

WST0007.fail.rst.elem=WST0007: \u7121\u6CD5\u5F9E\u5143\u7D20 {0} \u5EFA\u7ACB RST.

WST0008.fail.rstr.source=WST0008: \u7121\u6CD5\u5F9E\u4F86\u6E90 {0} \u5EFA\u7ACB RSTR.

WST0009.fail.rstr.elem=WST0009: \u7121\u6CD5\u5F9E\u5143\u7D20 {0} \u5EFA\u7ACB RSTR.

# {0} - "RST"/"RSTRCollection"/"STR" ("Request Security Token", "Security Token Reference")
WST0010.failed.creation.from.jaxbele=WST0010: \u5F9E JAXBElement \u5EFA\u7ACB {0} \u6642\u767C\u751F\u554F\u984C.

WST0011.parserconfig.ex.toElement=WST0011: \u5EFA\u7ACB\u5143\u7D20\u6642\u767C\u751F\u5256\u6790\u5668\u7D44\u614B\u7570\u5E38\u72C0\u6CC1.

WST0012.jaxb.ex.toElement=WST0012: \u5EFA\u7ACB\u300C\u5143\u7D20\u300D\u6642\u767C\u751F JAXBException.

WST0013.error.secret.key=WST0013: \u4F7F\u7528\u6F14\u7B97\u6CD5 {0} \u8A08\u7B97\u5927\u5C0F\u70BA {1} \u4E14\u9069\u7528\u65BC\u670D\u52D9 {2} \u7684\u79D8\u5BC6\u91D1\u9470\u6642\u767C\u751F\u932F\u8AA4.

WST0014.uri.syntax=WST0014: \u5F9E RST \u7684\u76F8\u95DC\u8CC7\u8A0A\u74B0\u5883\u53D6\u5F97\u7684 URI \u7121\u6548.

# {0} - user name, {1} - token type, {2} - URL e.g.: WST0015:The client CN=a,L=b,ST=c,2.5.4.17=#13053238323039 is not authorized to be issued the token of type urn:oasis:names:tc:SAML:2.0:assertion applied to http://localhost:8080/myService.
WST0015.client.not.authorized=WST0015: \u672A\u6388\u6B0A\u5F9E\u5C6C\u7AEF {0} \u767C\u51FA\u5957\u7528\u81F3 {2} \u4E14\u985E\u578B\u70BA {1} \u7684\u8A18\u865F.

WST0016.problem.itCtx=WST0016: \u547C\u53EB STS {0} \u6216\u5728\u8981\u6C42\u670D\u52D9 {1} \u7684\u8A18\u865F\u4E26\u8655\u7406\u5176\u56DE\u61C9\u6642\u767C\u751F\u554F\u984C.

# STS = Security Token Service.
WST0017.service.portname.error=WST0017: \u7121\u6CD5\u53D6\u5F97 STS \u63CF\u8FF0\u8CC7\u6599. MEX \u547C\u53EB STS {0} \u5931\u6557.

WST0018.tokens.null=WST0018: \u5957\u7528\u81F3\u670D\u52D9 {0} \u7684\u300C\u8981\u6C42\u5B89\u5168\u8A18\u865F\u56DE\u61C9\u300D\u7121\u6548. RSTR \u672A\u5305\u542B\u767C\u51FA\u7684\u8A18\u865F\u4E5F\u672A\u5305\u542B\u8B49\u660E\u8A18\u865F.

WST0019.invalid.proofToken.type=WST0019: \u670D\u52D9 {1} \u7684\u8B49\u660E\u8A18\u865F\u985E\u578B {0} \u7121\u6548.

# {0} - text in base64 encoding (e.g. AGVsbG8=)
WST0020.error.decoding=WST0020: \u89E3\u78BC {0} \u6642\u767C\u751F\u932F\u8AA4.

WST0021.error.unmarshal.domElement=WST0021: \u5F9E DOM \u5143\u7D20\u89E3\u9664\u5C01\u9001\u8655\u7406 (Unmarshal) \u81F3 JAXBElement \u6642\u767C\u751F\u932F\u8AA4.

WST0022.invalid.entropy=WST0022: \u7121\u6548\u7684 entropy \u985E\u578B: {0}. \u5141\u8A31\u7684\u985E\u578B\u70BA - Binary\u3001EncryptedType \u4EE5\u53CA Custom.

WST0023.invalid.uri.syntax=WST0023: \u7121\u6548\u7684 URI \u8A9E\u6CD5: {0}.

WST0024.invalid.request.type=WST0024: \u7121\u6548\u7684\u8981\u6C42\u985E\u578B: {0}. \u5FC5\u9808\u662F Issue\u3001Cancel\u3001KeyExchange\u3001Renew \u6216 Validate \u5176\u4E2D\u4E4B\u4E00.

WST0025.invalid.key.type=WST0025: \u5957\u7528\u81F3\u670D\u52D9 {1} \u7684\u91D1\u9470\u985E\u578B {0} \u7121\u6548. \u5FC5\u9808\u662F\u300C\u516C\u7528\u91D1\u9470\u300D\u3001\u300C\u5C0D\u7A31\u5F0F\u91D1\u9470\u300D\u6216\u300C\u7121\u8B49\u660E\u91D1\u9470\u300D\u5176\u4E2D\u4E4B\u4E00.

WST0026.invalid.ck.algorithm.E=WST0026: \u7121\u6548\u7684\u8A08\u7B97\u91D1\u9470\u6F14\u7B97\u6CD5 {0}.
WST0026.invalid.ck.algorithm=WST0026: \u7121\u6548\u7684\u8A08\u7B97\u91D1\u9470\u6F14\u7B97\u6CD5 {0}. \u5FC5\u9808\u662F HASH \u6216 PSHA1 \u5176\u4E2D\u4E4B\u4E00.

WST0028.invalid.ck=WST0028: \u7121\u6548\u7684\u8A08\u7B97\u91D1\u9470 URI {0}.

WST0029.could.not.get.sts.location=WST0029: \u7121\u6CD5\u5F9E IssuedToken \u6216\u5F9E\u5C6C\u7AEF\u7D44\u614B\u53D6\u5F97\u5B58\u53D6\u670D\u52D9 {0} \u7684 STS \u4F4D\u7F6E.

WST0030.requestor.null=WST0030: \u4E3B\u9AD4\u70BA\u7A7A\u503C. \u6709\u53EF\u80FD\u662F\u5F9E\u5C6C\u7AEF\u672A\u7D93\u904E\u8A8D\u8B49, \u6216\u8005\u672A\u5728\u8A8D\u8B49\u6642\u5EFA\u7ACB\u4E3B\u9AD4.

# {0} - token type, {1} URL
WST0031.unsupported.token.type=WST0031: \u4E0D\u652F\u63F4\u5957\u7528\u81F3 {1} \u7684\u8A18\u865F\u985E\u578B {0}. \u9810\u671F\u61C9\u70BA SAML 1.0 \u6216 SAML 1.1 \u5BA3\u544A\u8A18\u865F\u985E\u578B.

WST0032.error.creating.SAML.assertion=WST0032: \u5EFA\u7ACB\u300CSAML \u5BA3\u544A\u300D\u6642\u767C\u751F\u932F\u8AA4.

WST0033.unable.get.service.cert=WST0033: \u7121\u6CD5\u53D6\u5F97\u670D\u52D9 {0} \u7684\u670D\u52D9\u6191\u8B49.

WST0034.unable.get.client.cert=WST0034: \u7121\u6CD5\u53D6\u5F97\u5F9E\u5C6C\u7AEF\u6191\u8B49. \u6709\u53EF\u80FD\u662F\u4E3B\u9AD4\u672A\u5305\u542B\u6709\u6548\u7684\u8B49\u660E\u8CC7\u6599\u6216\u65B0\u589E X509 \u6191\u8B49\u6642\u767C\u751F\u554F\u984C.

WST0035.unable.create.sign.saml.assertion=WST0035: \u7121\u6CD5\u5EFA\u7ACB\u7C3D\u7F72\u300CSAML \u5BA3\u544A\u300D.

WST0036.unable.create.keyInfo=WST0036: \u7121\u6CD5\u5EFA\u7ACB\u300C\u91D1\u9470\u8CC7\u8A0A\u300D.

WST0037.error.computing.key=WST0037: \u8A08\u7B97\u91D1\u9470\u6642\u767C\u751F\u932F\u8AA4.

WST0038.init.contract.fail=WST0038: \u7121\u6CD5\u5EFA\u7ACB\u4FE1\u4EFB\u5408\u7D04.

WST0039.error.creating.docfactory=WST0039: \u5EFA\u7ACB\u6587\u4EF6\u8655\u7406\u7AD9\u6642\u767C\u751F\u932F\u8AA4, \u56E0\u70BA\u767C\u751F\u300C\u5256\u6790\u5668\u300D\u7570\u5E38\u72C0\u6CC1.

WST0040.error.encrypt.proofkey=WST0040: \u52A0\u5BC6\u670D\u52D9 {0} \u7684\u8B49\u660E\u91D1\u9470\u6642\u767C\u751F\u932F\u8AA4.

WST0041.service.not.created=WST0041: \u7121\u6CD5\u5EFA\u7ACB\u670D\u52D9, \u56E0\u70BA URL {0} \u683C\u5F0F\u932F\u8AA4.

WST0042.no.matching.service.mex=WST0042: \u5728\u300C\u63CF\u8FF0\u8CC7\u6599\u300D\u4E2D\u627E\u4E0D\u5230\u7AEF\u9EDE\u70BA {0} \u7684\u76F8\u7B26\u670D\u52D9.

WST0043.unable.get.sts.key=WST0043: \u7121\u6CD5\u53D6\u5F97 STS \u7684\u91D1\u9470.

WST0044.error.encrypt.issued.token=WST0044: \u52A0\u5BC6\u670D\u52D9 {0} \u7684\u767C\u51FA\u8A18\u865F\u6642\u767C\u751F\u932F\u8AA4.

WST0045.error.unmarshall.claims=WST0045: \u89E3\u9664\u5C01\u9001\u8655\u7406 (Unmarshal) \u670D\u52D9 {0} \u7684\u300C\u5BA3\u544A\u300D\u6642\u767C\u751F\u932F\u8AA4.

WST0046.token.expired=WST0046: \u8A18\u865F\u5DF2\u904E\u671F: \u5EFA\u7ACB\u6642\u9593\u70BA {0}, \u5230\u671F\u6642\u9593\u70BA {1}; \u76EE\u524D\u6642\u9593\u70BA {2}

#### Info, Fine and Warning messages ####
#### Codes starting from 1000+
WST1001.token.type=WST1001: \u8A18\u865F\u985E\u578B: {0}.

WST1002.provider.type=WST1002: STS \u63D0\u4F9B\u8005\u7D44\u614B\u985E\u578B {0}.

WST1003.tokentype.appliesto.null=WST1003: TokenType \u8207 AppliesTo \u4E0D\u53EF\u540C\u6642\u70BA\u7A7A\u503C.

WST1004.error.marshal.toString=WST1004: \u5C07 {0} \u5143\u7D20\u5C01\u9001\u8655\u7406 (Marshal) \u6210\u5B57\u4E32\u4EE5\u52A0\u4EE5\u8A18\u9304\u6642\u767C\u751F\u932F\u8AA4.

WST1006.created.rst.issue=WST1006: \u5DF2\u5EFA\u7ACB\u554F\u984C\u7684 RST:\n {0}.

WST1007.created.rstr.issue=WST1007: \u5DF2\u5EFA\u7ACB\u554F\u984C\u7684 RSTR:\n {0}.

WST1008.created.rstr.cancel=WST1008: \u5DF2\u5EFA\u7ACB\u53D6\u6D88\u7684 RSTR:\n {0}.

WST1009.null.binary.secret=WST1009:\u300C\u4E8C\u9032\u4F4D\u5BC6\u78BC\u300D\u70BA\u7A7A\u503C. RST \u4E2D\u7684 ClientEntropy \u672A\u5305\u542B\u300C\u4E8C\u9032\u4F4D\u5BC6\u78BC\u300D.

WST1010.key.size=WST1010: KeySize \u503C: {0}. \u9810\u8A2D\u503C\u70BA {1}.

WST1011.problem.metadata=WST1011: \u5F9E\u300C\u767C\u51FA\u7684\u8A18\u865F\u300D\u64F7\u53D6\u300C\u63CF\u8FF0\u8CC7\u6599\u300D\u6642\u767C\u751F\u554F\u984C. STS URI \u70BA {0}.

WST1012.service.portname.mex=WST1012: \u6B63\u5728\u900F\u904E MEX \u53D6\u5F97 STS \u670D\u52D9\u548C\u9023\u63A5\u57E0\u540D\u7A31. ServiceName: {0}, PortName: {1}.

WST1013.sts.uri.client=WST1013: \u6B63\u5728\u5F9E\u5F9E\u5C6C\u7AEF\u7D44\u614B\u53D6\u5F97 STS \u4F4D\u7F6E. STS URI: {0}.

WST1014.response.invoking.rst=WST1014: \u547C\u53EB RST \u6642\u7684\u300CRSTR \u56DE\u61C9\u300D:\n {0}.
