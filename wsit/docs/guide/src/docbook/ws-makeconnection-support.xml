<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2010, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "metro.ent">
%ents;
]>
<chapter version="5.0" xml:id="using-mc" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    <title>WS-MakeConnection support</title>

    <section xml:id="using-mc-introduction">
        <title>Introduction to WS-MakeConnection</title>

        <para>The <link
        xlink:href="http://docs.oasis-open.org/ws-rx/wsmc/v1.1/wsmc.html">WS-MakeConnection</link>
        specification defines a protocol that allows messages to be
        transferred between WS-MakeConnection-aware nodes by using a
        transport-specific back-channel. The protocol itself is described in a
        transport-independent manner. This allows it to be implemented using
        different network technologies. To support interoperable Web services,
        a SOAP binding is defined within WS-MakeConnection
        specification.</para>

        <para>The WS-MakeConnection mechanism for the transfer of messages
        between two endpoints is useful in situations when the sending
        endpoint is unable to initiate a new connection to the receiving
        endpoint. Such situation may typically occur when a connection from a
        non-adressable client is broken before a response to client's request
        has been delivered. Rather than discarding the old response, replaying
        the whole request/response message exchange and generating a new
        response, which may be computationally or otherwise resource
        intensive, WS-MakeConnection provides a way how to uniquely identify
        non-addressable endpoints, and a mechanism by which undelivered
        messages destined for those endpoints can be delivered.</para>

        <para>As all of the WS-* technologies, WS-MakeConnection mechanism is
        extensible allowing additional functionality, such as security, to be
        tightly integrated. WS-MakeConnection specification integrates with
        and complements the WS-ReliableMessaging, WS-Security, WS-Policy, and
        other Web services specifications.</para>
    </section>

    <section xml:id="using-mc-config_endpoint">
        <title>Configuring Web Service Endpoint</title>

        <section xml:id="using-mc-config_endpoint-wspolicy">
            <title>Configuration via an WS-Policy expression</title>

            <para>As all other WS-* features, WS-MakeConnection can be enabled
            using a WS-Policy assertion. Unfortunately, unlike many other WS-*
            features, <link xlink:href="http://netbeans.org/">NetBeans
            IDE</link> in it's current version 6.8 don't provide a nice
            GUI-based support for enabling/disabling WS-MakeConnection feature
            on an endpoint. This means that in order to enable
            WS-MakeConnection, you need to manually put the assertion into
            your endpoint's WSIT config file. Here are the steps:</para>

            <orderedlist>
                <listitem>
                    <para>Open the existing WSIT config file for the endpoint.
                    <itemizedlist>
                            <listitem>
                                <para>If no config file has been created for the
                                endpoint yet, you can create an empty one with a
                                little help from NetBeans IDE by selecting and
                                unselecting any feature in the QoS dialog or the
                                "Design" tab of the web service endpoint.</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>

                <listitem>
                    <para>Add the WS-MakeConnection assertion namespace
                    definition into the root XML element of the WSIT config
                    file: <example>
                            <programlisting language="xml"
                                            linenumbering="unnumbered">xmlns:wsmc="http://docs.oasis-open.org/ws-rx/wsmc/200702"</programlisting>
                        </example></para>
                </listitem>

                <listitem>
                    <para>Create new WS-Policy expression in the config file:
                    <example>
                            <programlisting language="xml"
                                            linenumbering="unnumbered">&lt;wsp:Policy wsu:Id="McTestEchoPortBindingPolicy"&gt;
    &lt;wsp:ExactlyOne&gt;
        &lt;wsp:All&gt;
            &lt;wsam:Addressing wsp:Optional="false"/&gt;
            &lt;wsmc:MCSupported /&gt;
        &lt;/wsp:All&gt;
    &lt;/wsp:ExactlyOne&gt;
&lt;/wsp:Policy&gt;</programlisting>
                        </example></para>
                </listitem>

                <listitem>
                    <para>Attach newly created WS-Policy expression to the
                    endpoint binding using WS-Policy reference: <example>
                            <programlisting language="xml"
                                            linenumbering="unnumbered">&lt;binding name="McTestEchoPortBinding" type="tns:McTestEcho"&gt;
    &lt;wsp:PolicyReference URI="#McTestEchoPortBindingPolicy"/&gt;

    ...

&lt;/binding&gt;</programlisting>
                        </example></para>
                </listitem>

                <listitem>
                    <para>Build and run the service. Service will now have
                    WS-MakeConnection support enabled.</para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="using-mc-config_endpoint-annotation">
            <title>Configuration via a Java annotation</title>

            <para>In addition to using WS-Policy expression as discussed in
            <xref linkend="using-mc-config_endpoint-wspolicy"
            xrefstyle="select:title" />, you may as well configure
            WS-MakeConnection support using a
            <code>@MakeConnectionSupported</code> Java annotation provided by
            Metro. Please note, that this annotation is meant to annotate
            whole classes only. The resulting Java code for a sample web
            service would look like this:</para>

            <example>
                <title>Example of WS-MakeConnection enabled service class
                using @MakeConnectionSupported Java annotation</title>

                <programlisting language="java" linenumbering="unnumbered">package com.sun.metro.mc.service;

import com.sun.xml.ws.rx.mc.MakeConnectionSupported;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebService;

@WebService()
@MakeConnectionSupported
public class McTestEcho {

    /**
     * Web service operation
     */
    @WebMethod(operationName = "echo")
    public String echo(@WebParam(name = "message")
    final String message) {
        return "Received: " + message;
    }

}</programlisting>
            </example>
        </section>
    </section>

    <section xml:id="using-mc-config-client">
        <title>Configuring Web Service Client</title>

        <para>Once the WS endpoint is properly configured in Metro to support
        WS-MakeConnection protocol messages, it advertises this ability in
        it's WSDL descriptor. In case you are developing a client for such an
        endpoint (which advertises WS-MakeConnection support in its WSDL), all
        the necessary configuration happens autmatically and you don't need to
        take any additional steps to enable WS-MakeConnection support on the
        client side.</para>

        <para>There are however other web service frameworks that sometimes
        fail to advertise their advanced capabilities. In case of such an
        endpoint, which doesn't have the <code>&lt;wsmc:MCSupported
        /&gt;</code> assertion specified in its WSDL descriptor but you know
        that it DOES support WS-MakeConnection, you can use the JAX-WS's WS
        Feature mechanism to explicitly enable WS-MakeConnection support on
        your client proxy by passing a
        <code>com.sun.xml.ws.rx.mc.MakeConnectionSupportedFeature</code>
        instance as a parameter into a port getter method:</para>

        <example>
            <programlisting language="java" linenumbering="unnumbered">McTestEcho port = null;
try {
    McTestEchoService service = new McTestEchoService();
    port = service.getMcTestEchoPort(
        new com.sun.xml.ws.rx.mc.MakeConnectionSupportedFeature());

    String message = "Test";

    String result = port.echo(message);

    System.out.println("Result = "+result);
} catch (Exception ex) {
    ex.printStackTrace();
} finally {
    if (port != null) {
        try {
            ((java.io.Closeable) port).close();
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
    }
}</programlisting>
        </example>

        <para>Please note once again that passing the
        <code>com.sun.xml.ws.rx.mc.MakeConnectionSupportedFeature</code>
        explicitly is required ONLY if the endpoint fails to advertise its
        support for WS-MakeConnection feature via the
        <code>&lt;wsmc:MCSupported /&gt;</code> WS-Policy assertion.</para>
    </section>
</chapter>
