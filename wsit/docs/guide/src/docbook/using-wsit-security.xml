<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2010, 2022 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "metro.ent">
%ents;
]>
<chapter version="5.0" xml:id="ahici" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    <title>Using WSIT Security</title>

    <section xml:id="ahicj">
        <title>Configuring Security Using NetBeans IDE</title>

        <para>This section describes the following tasks:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="gfrdt" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="gfrds" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <task xml:id="gfrdt">
            <title>To Secure the Service</title>

            <tasksummary>
                <para>To use the IDE to configure security for a web service
                and/or a web service operation, perform the following
                steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold">Create or open your web
                    service.</emphasis></para>

                    <para>If you need an example of how to create a web
                    service, refer to <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" />.</para>

                    <note>
                        <para>When creating an application using the wizards
                        in NetBeans IDE and running on GlassFish, the Java EE
                        Version defaults to Java EE 5. This results in an
                        application compliant with Jakarta Enterprise Web Services
                        Specification, which can be read at <link
                        xlink:href="https://jakarta.ee/specifications/enterprise-ws/">
                        https://jakarta.ee/specifications/enterprise-ws/</link>.
                        If you select a value other than the default, for
                        example, J2EE 1.4, the application that is created is
                        not Jakarta Enterprise Web Services compliant, which means that the
                        application is not Jakarta XML Web Service, but is JAX-RPC.</para>
                    </note>
                </step>

                <step>
                    <para><emphasis role="bold">In the
                    <guilabel>Projects</guilabel> window, expand the
                    <guilabel>Web Services</guilabel> node.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Right-click the node for the
                    web service you want to secure.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select <guimenuitem>Edit Web
                    Service Attributes</guimenuitem>.</emphasis></para>

                    <para>When the <guilabel>Web Service Attributes
                    Editor</guilabel> is opened, the <guilabel>Quality of
                    Service</guilabel> options appear (see <xref
                    linkend="gfrct" xrefstyle="select:title" />).</para>

                    <figure xml:id="gfrct">
                        <title>Web Service Attributes Editor Page</title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="100%"
                                           fileref="figures/tango_ws_edit_collapsed.png"
                                           scalefit="1" width="100%"/>
                            </imageobject>

                            <textobject>
                                <simpara>Screen shot of web service attributes
                                editor page</simpara>
                            </textobject>
                        </mediaobject>
                    </figure>
                </step>

                <step>
                    <para><emphasis role="bold">Select <guilabel>Secure
                    Service</guilabel>.</emphasis></para>

                    <para>This option enables WSIT security for all of the
                    operations of a web service.</para>

                    <para>For information on how to secure selected
                    operations, refer to <xref linkend="ahidy"
                    xrefstyle="select:title" />.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Choose a <guilabel>Security
                    Mechanism</guilabel> from the list.</emphasis></para>

                    <para>Most of the mechanisms are fully functional without
                    further configuration, however, if you'd like to customize
                    the mechanism, click <guilabel>Configure</guilabel> to
                    specify the configuration for that mechanism.</para>

                    <para>Options in the <guilabel>Configure</guilabel> dialog
                    are discussed in <xref linkend="ahifj"
                    xrefstyle="select:title" />.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Select <guilabel>Use
                    Development Defaults</guilabel>.</emphasis></para>

                    <para>Select this option to import certificates into the
                    GlassFish keystore and truststore so that they can be used
                    immediately for development. The WSIT message security
                    mechanisms require the use of v3 certificates. The default
                    GlassFish keystore and truststore do not contain v3
                    certificates at this time. In order to use message
                    security mechanisms with GlassFish, it is necessary to
                    obtain keystore and truststore files that contain v3
                    certificates and import the appropriate certificates into
                    the default GlassFish stores.</para>

                    <para>In addition to importing certificates, when this
                    option is selected a default user is created in the
                    <code>file</code> realm with username
                    <code>wsitUser</code>.</para>

                    <para>In a production environment, you should provide your
                    own certificates and user settings, however, in a
                    development environment you may find these defaults
                    useful.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Specify Keystore, Truststore,
                    STS, SSL, and/or user information as required for the
                    selected security mechanism. </emphasis></para>

                    <para>Refer to the entry for the selected security
                    mechanism in <xref linkend="ahico"
                    xrefstyle="select:title" /> . This table summarizes the
                    information that needs to be set up for each of the
                    security mechanisms.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Click
                    <guibutton>OK</guibutton> to save your
                    changes.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Run the web application by
                    right-clicking the project node and selecting
                    <guimenuitem>Run</guimenuitem>. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Verify the URL of the WSDL
                    file before proceeding with the creation of the web
                    service client. </emphasis></para>

                    <para>The client will be created from this WSDL file, and
                    will get the service's security policies through the web
                    service reference URL when the client is built or
                    refreshed.</para>
                </step>
            </procedure>
        </task>

        <task xml:id="gfrds">
            <title>To Secure the Client</title>

            <tasksummary>
                <para>All of the steps in <xref linkend="gfrdt"
                xrefstyle="select:title" /> need to be completed before you
                create your web service client. The service's security
                policies are defined in its WSDL. You specify this WSDL file
                when you create the client application so that the client is
                configured to work with the service's security mechanism
                through the web service reference URL when the client is built
                or refreshed.</para>

                <para>To use the IDE to configure security for a web service
                client, perform the following steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold">Create a client for your web
                    service.</emphasis></para>

                    <para>If you need an example of how to do this, see <xref
                    linkend="wsit_example_with_nb-creating_wsit_client"
                    xrefstyle="select:title" /> .</para>

                    <para>If you are creating a client for a mechanism that
                    will use SSL, specify the secure port for running the
                    client when completing the New Web Service Client step. To
                    do this, type <code>https://</code>
                    <emphasis>fully_qualified_hostname</emphasis>
                    <code>:8181/</code> <emphasis>rest_of_url</emphasis> in
                    the WSDL URL field of the New Web Service Client wizard.
                    For the example, this is the way to specify the secure URL
                    for <code>CalculatorWSService</code> web service:</para>

                    <programlisting>https://<emphasis>fully_qualified_hostname</emphasis>:8181/CalculatorApplication/CalculatorWSService?wsdl</programlisting>

                    <note>
                        <para>If you prefer to use <code>localhost</code> in
                        place of the fully-qualified hostname when specifying
                        the URL for the service WSDL, you must follow the
                        workaround described in <xref linkend="ahicy"
                        xrefstyle="select:title" />.</para>
                    </note>
                </step>

                <step>
                    <para><emphasis role="bold">In the Projects window, expand
                    the client node.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Expand the Web Service
                    References node.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the node for the
                    web service reference you want to secure.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Edit Web Service
                    Attributes.</emphasis></para>

                    <para>When the Web Service References Attributes Editor is
                    opened, select the Quality of Service tab to display the
                    security options (see <xref linkend="gfrda"
                    xrefstyle="select:title" /> ).</para>

                    <figure xml:id="gfrda">
                        <title>Web Service References Attributes Editor Page
                        for Web Service Clients</title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="100%"
                                           fileref="figures/web_svc_ref_wsit.png"
                                           scalefit="1" width="100%"/>
                            </imageobject>

                            <textobject>
                                <simpara>Screen shot of web service references
                                attributes editor page for web service
                                clients</simpara>
                            </textobject>
                        </mediaobject>
                    </figure>
                </step>

                <step>
                    <para><emphasis role="bold">Select Use Development
                    Defaults.</emphasis></para>

                    <para>Refer to <xref linkend="ahicq"
                    xrefstyle="select:title" /> for a summary of what options
                    are required on the client side. The configuration
                    requirements for the client are dependent upon which
                    security mechanism is specified on the server side.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to save your
                    changes.</emphasis></para>

                    <para>The security configuration information is saved in
                    two files under Source Packages/META-INF. For more
                    information on the format and runtime usage of these
                    files, see <xref linkend="ahifi"
                    xrefstyle="select:title" /> .</para>
                </step>
            </procedure>
        </task>
    </section>

    <section xml:id="ahicm">
        <title>Summary of Configuration Requirements</title>

        <para>The following sections summarize the options that need to be
        configured for each of the security mechanisms on both the service and
        client side. The configuration requirements for the client are
        dependent upon which security mechanism is specified on the server
        side.</para>

        <para>This section covers the following topics:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="ahicn" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahicp" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <section xml:id="ahicn">
            <title>Summary of Service-Side Configuration Requirements</title>

            <para><xref linkend="ahico" xrefstyle="select:title" /> summarizes
            the options that need to be configured for each security
            mechanism. Each of the columns is briefly discussed after the
            table.</para>

            <table frame="all" xml:id="ahico">
                <title>Summary of Service-Side Configuration
                Requirements</title>

                <tgroup cols="7" colsep="1" rowsep="1">
                    <colspec colwidth="4*" />

                    <colspec align="center" />

                    <colspec align="center" />

                    <colspec align="center" />

                    <colspec align="center" />

                    <colspec align="center" colwidth="2*" />

                    <colspec align="center" />

                    <thead>
                        <row>
                            <entry><para>Mechanism</para></entry>

                            <entry><para>Keystore</para></entry>

                            <entry><para>Truststore</para></entry>

                            <entry><para>STS</para></entry>

                            <entry><para>SSL</para></entry>

                            <entry><para>User in GlassFish</para></entry>

                            <entry><para>Kerberos</para></entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><para>Username Authentication with Symmetric
                            Key</para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Username Authentication with Password
                            Derived Keys</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Mutual Certificates</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X (no alias) </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Symmetric Binding with Kerberos
                            Tokens</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>
                        </row>

                        <row>
                            <entry><para>Transport Security</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Message Authentication over SSL -
                            Username Token</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Message Authentication over SSL - X.509
                            Token</para></entry>

                            <entry/>

                            <entry><para> X (no alias) </para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Authorization over
                            SSL</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Endorsing Certificate</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Sender Vouches with
                            Certificate</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X (no alias) </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Holder of Key</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X (no alias) </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Token</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Token with Service
                            Cert.</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Endorsing
                            Token</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <itemizedlist>
                <listitem>
                    <para><emphasis>Keystore</emphasis>: If this column has an
                    X, select Use Development Defaults, or click the Keystore
                    button and configure the keystore to specify the alias
                    identifying the service certificate and private key. For
                    the GlassFish keystores, the file is
                    <code>keystore.jks</code> and the alias is
                    <code>xws-security-server</code>, assuming that you've
                    updated the GlassFish default certificate stores.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Truststore</emphasis> : If this column has
                    an X, select Use Development Defaults, or click the
                    Truststore button and configure the truststore to specify
                    the alias that contains the certificate and trusted roots
                    of the client. For the GlassFish keystores, the file is
                    <code>cacerts.jks</code> and the alias is
                    <code>xws-security-client</code> , assuming that you've
                    updated the GlassFish default certificate stores.</para>
                </listitem>

                <listitem>
                    <para><emphasis>STS</emphasis> : If this column has an X,
                    you must have a Security Token Service that can be
                    referenced by the service. An example of an STS can be
                    found in the section <xref linkend="gfrlq"
                    xrefstyle="select:title" /> . The STS is secured using a
                    separate (non-STS) security mechanism. The security
                    configuration for the client-side of this application is
                    dependent upon the security mechanism selected for the
                    STS, and not on the security mechanism selected for the
                    application.</para>
                </listitem>

                <listitem>
                    <para><emphasis>SSL</emphasis> : To use a mechanism that
                    uses secure transport (SSL), you must configure the
                    <emphasis>system</emphasis> to point to the client and
                    server keystore and truststore files. Steps for doing this
                    are described in <xref linkend="ahidi"
                    xrefstyle="select:title" /> .</para>
                </listitem>

                <listitem>
                    <para><emphasis>User in GlassFish</emphasis> : To use a
                    mechanism that requires a user database for
                    authentication, you can add a user to the file realm of
                    GlassFish. Select Use Development Defaults, or follow the
                    instructions for doing this at <xref linkend="ahidj"
                    xrefstyle="select:title" /> .</para>
                </listitem>

                <listitem>
                    <para><emphasis>Kerberos</emphasis> : This option is only
                    valid for 'Symmetri Binding with Kerberos Tokens' Profile.
                    Click the Kerbeos button to specify the login module to be
                    used for this service. Login Modules can be specified in
                    $GLASSFISH_HOME/domains/domain1/config/login.conf for
                    GlassFish. An example showing use of Kerberos Tokens can
                    be found at <xref linkend="gfzhh"
                    xrefstyle="select:title" />.</para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="ahicp">
            <title>Summary of Client-Side Configuration Requirements</title>

            <para><xref linkend="ahicq" xrefstyle="select:title" /> summarizes
            the options that need to be configured for each of the security
            mechanisms on the client-side. Each of the columns is briefly
            discussed after the table.</para>

            <table frame="all" xml:id="ahicq">
                <title>Summary of Client-Side Configuration
                Requirements</title>

                <tgroup cols="9" colsep="1" rowsep="1">
                    <colspec colwidth="4*" />

                    <colspec align="center" />

                    <colspec align="center" />

                    <colspec align="center" colwidth="2*" />

                    <colspec align="center" colwidth="2*" />

                    <colspec align="center" />

                    <colspec align="center" />

                    <colspec align="center" colwidth="2*" />

                    <colspec align="center" />

                    <thead>
                        <row>
                            <entry><para>Mechanism</para></entry>

                            <entry><para>Keystore</para></entry>

                            <entry><para>Truststore</para></entry>

                            <entry><para>Default User</para></entry>

                            <entry><para>SAML Callback Handler</para></entry>

                            <entry><para>STS</para></entry>

                            <entry><para>SSL</para></entry>

                            <entry><para>User in GlassFish</para></entry>

                            <entry><para>Kerberos</para></entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><para>Username Authentication with Symmetric
                            Key</para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Username Authentication with Password
                            Derived Keys</para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Mutual Certificates</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Symmetric Binding with Kerberos
                            Tokens</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>
                        </row>

                        <row>
                            <entry><para>Transport Security</para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Message Authentication over SSL -
                            Username Token</para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Message Authentication over SSL - X.509
                            Token</para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Authorization over
                            SSL</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>Endorsing Certificate</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Sender Vouches with
                            Certificate</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>SAML Holder of Key</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Token</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Token with Service
                            Certificate</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>

                        <row>
                            <entry><para>STS Issued Endorsing
                            Token</para></entry>

                            <entry><para> X </para></entry>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry><para> X </para></entry>

                            <entry/>

                            <entry/>

                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <itemizedlist>
                <listitem>
                    <para><emphasis>Keystore</emphasis>: If this column has an
                    X, select Use Development Defaults, or click Keystore to
                    configure the keystore to point to the alias for the
                    client certificate. For the GlassFish keystores, the
                    keystore file is <code>keystore.jks</code> and the alias
                    is <code>xws-security-client</code>, assuming that you've
                    updated the GlassFish default certificate stores.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Truststore</emphasis>: If this column has
                    an X, select Use Development Defaults, or click Truststore
                    to configure the truststore that contains the certificate
                    and trusted roots of the server. For the GlassFish
                    keystores, the file is <code>cacerts.jks</code> and the
                    alias is <code>xws-security-server</code> , assuming that
                    you've updated the GlassFish default certificate stores as
                    described in <xref linkend="gfrgz"
                    xrefstyle="select:title" />.</para>

                    <para>When using an STS mechanism, the client specifies
                    the truststore and certificate alias for the STS, not the
                    service. For the GlassFish stores, the file is
                    <code>cacerts.jks</code> and the alias is
                    <code>wssip</code>.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Default User</emphasis>: When this column
                    has an X, you must configure either a default username and
                    password, a UsernameCallbackHandler, or leave these
                    options blank and specify a user at runtime. More
                    information on these options can be found at <xref
                    linkend="ahicr" xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>SAML Callback Handler</emphasis> : When
                    this column has an X, you must specify a SAML Callback
                    Handler. Examples of SAML Callback Handlers are described
                    in <xref linkend="ahict"
                    xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>STS</emphasis> : If this column has an X,
                    you must have a Security Token Service that can be
                    referenced by the service. An example of an STS can be
                    found in the section<xref linkend="gfrlq"
                    xrefstyle="select:title" />. The STS is secured using a
                    separate (non-STS) security mechanism. The security
                    configuration for the client-side of this application is
                    dependent upon the security mechanism selected for the
                    STS, and not on the security mechanism selected for the
                    application. Note that on the service side, it is
                    optionally to set Issuer for the STS to be used. You only
                    need to configure the STS information on the client side
                    if Issuer if not available in the service wsdl. If both
                    configured, the service side Issuer takes high
                    priority.</para>
                </listitem>

                <listitem>
                    <para><emphasis>SSL</emphasis> : To use a mechanism that
                    uses secure transport (SSL), you must configure the system
                    to point to the client and server keystore and truststore
                    files. Steps for doing this are described in <xref
                    linkend="ahidi" xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>User in GlassFish</emphasis>: To use a
                    mechanism that requires a user database for
                    authentication, select Use Development Defaults, or add a
                    user to the <code>file</code> realm of GlassFish.
                    Instructions for doing this can be found at <xref
                    linkend="ahidj" xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Kerberos</emphasis>: This option is only
                    valid for 'Symmetric Binding with Kerberos Tokens'
                    profile. Click Kerberos button to configure the Login
                    Module and Service Principal to be used by client, and if
                    credential delegation should be set. An example showing
                    use of Kerberos Tokens can be found at <xref
                    linkend="gfzhh" xrefstyle="select:title" />.</para>
                </listitem>
            </itemizedlist>

            <section xml:id="ahicr">
                <title>Configuring Username Authentication on the
                Client</title>

                <para>On the client side, a user name and password must be
                configured for some of the security mechanisms. For this
                purpose, you can use the default Username and Password
                Callback Handlers (when deploying to GlassFish), specify a
                SAML Callback Handler, specify a default user name and
                password for development purposes, create and specify your own
                Callback Handlers if the container you are using does not
                provide defaults, or specify the username and password
                dynamically at runtime. When using any of these options, you
                must create an authorized user on GlassFish using the Admin
                Console, as described in <xref linkend="ahidj"
                xrefstyle="select:title" />.</para>

                <task xml:id="gfrev">
                    <title>To Configure Username Authentication on the
                    Client</title>

                    <tasksummary>
                        <para>Once you've created an authorized user and
                        determined how your application needs to specify the
                        user, configure the Username Authentication options as
                        follows.</para>
                    </tasksummary>

                    <procedure>
                        <step>
                            <para><emphasis role="bold">In the Projects window,
                            expand the node for the web service client.
                            </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Expand the Web Service
                            References node.</emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Right-click the node for
                            the web service reference for which you want to
                            configure security options. </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Select Edit Web Service
                            Attributes.</emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Select the Quality of
                            Service tab to display the WSIT Security options.
                            </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Expand the Security
                            section to specify the user name and password
                            information as required by the service. The dialog
                            appears as shown in <xref linkend="ahics"
                            xrefstyle="select:title" />. </emphasis> <figure
                                    xml:id="ahics">
                                    <title>Quality of Service - Client -
                                    Security</title>

                                    <mediaobject>
                                        <imageobject>
                                            <imagedata contentdepth="100%"
                                                       fileref="figures/web_svc_ref_wsit.png"
                                                       scalefit="1" width="100%"/>
                                        </imageobject>

                                        <textobject>
                                            <simpara>Screen shot of Quality of Service
                                            configuration - client - security</simpara>
                                        </textobject>
                                    </mediaobject>
                                </figure></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">The following options
                            are available.</emphasis> <note>
                                    <para>Currently the GlassFish
                                    <code>CallbackHandler</code> cannot handle the
                                    following: SAML Callbacks and Require ThumbPrint
                                    Reference assertions under an X.509 Token. This may
                                    be addressed in a future milestone.</para>
                                </note></para>

                            <stepalternatives>
                                <step>
                                    <para><emphasis>Use Development
                                    Defaults</emphasis>:</para>

                                    <para>Select this option to import certificates into
                                    the GlassFish keystore and truststore so that they
                                    can be used immediately for development. The WSIT
                                    message security mechanisms require the use of v3
                                    certificates. The default GlassFish keystore and
                                    truststore do not contain v3 certificates at this
                                    time. In order to use message security mechanisms
                                    with GlassFish, it is necessary to obtain keystore
                                    and truststore files that contain v3 certificates
                                    and import the appropriate certificates into the
                                    default GlassFish stores.</para>

                                    <para>In addition to importing certificates, when
                                    this option is selected a default user is created in
                                    the <code>file</code> realm with username
                                    <code>wsitUser</code>.</para>

                                    <para>In a production environment, you should
                                    provide your own certificates and user settings,
                                    however, in a development environment you may find
                                    these defaults useful.</para>
                                </step>

                                <step>
                                    <para><emphasis>Authentication
                                    Credentials</emphasis>: Select Static or Dynamic.
                                    Select Static to supply a static username and
                                    password, or select Dynamic and specify the Username
                                    and Password CallbackHandlers. Select Static if you
                                    want to fill in the exact user credentials that the
                                    client is providing, and which cannot be changed
                                    after deployment. Static is useful to developing and
                                    testing applications prior to deployment. Select
                                    Dynamic to use CallbackHandlers to provide a dynamic
                                    way to provide credentials. Dynamic is useful if the
                                    credentials need to be obtained from some third
                                    party, for example, or if the developer doesn't want
                                    to store the user name and password in a
                                    configuration file because it might introduce a
                                    security risk.</para>
                                </step>

                                <step>
                                    <para><emphasis>Default Username</emphasis>,
                                    <emphasis>Default Password</emphasis> : These
                                    options are available when Static is selected as the
                                    Authentication Credential. Type the name of an
                                    authorized user and the password for this user. This
                                    option is best used only in the development
                                    environment. When the Default Username and Default
                                    Password are specified, the username and password
                                    are stored in the <code>wsit-client.xml</code> file
                                    in clear text, which presents a security risk. Do
                                    not use this option for production.</para>
                                </step>

                                <step>
                                    <para><emphasis>Default Username Callback
                                    Handler</emphasis>, <emphasis>Default Password
                                    Callback Handler</emphasis> : These options are
                                    available when the Authentication Credential is
                                    Dynamic. If you create JSR-109-compliant web
                                    services and web service clients that run under an
                                    Application Server container (JSR-109 deployment),
                                    the container handles the callbacks and you do not
                                    need to configure Callback Handlers of your own. If
                                    you are using another container, select the Browse
                                    button to select the class implementing the
                                    <code>javax.security.auth.callback.CallbackHandler</code>
                                    interface.</para>
                                </step>

                                <step>
                                    <para><emphasis>SAML Callback Handler</emphasis> :
                                    To use a SAML Callback Handler, you need to create
                                    one, as there is no default. References to example
                                    SAML Callback Handlers are provided in <xref
                                    linkend="ahict" xrefstyle="select:title" />. An
                                    example that uses a SAML Callback Handler can be
                                    found in <xref linkend="ahies"
                                    xrefstyle="select:title" />.</para>
                                </step>

                                <step>
                                    <para><emphasis>Timestamp Timeout</emphasis>: This
                                    property specifies the duration(in seconds) for
                                    which timestamp should be considered valid. The
                                    default is 5 mins(300 seconds).</para>
                                </step>
                            </stepalternatives>
                        </step>
                    </procedure>
                </task>
            </section>

            <section xml:id="ahict">
                <title>Example SAML Callback Handlers</title>

                <para>Creating a SAML Callback Handler is beyond the scope of
                this document. However, the following web pages may be helpful
                for this purpose:</para>

                <itemizedlist>
                    <listitem>
                        <para>A client-side configuration, which includes a
                        SAML Callback Handler, can be viewed at the following
                        URL:</para>

                        <para><link
                        xlink:href="https://github.com/eclipse-ee4j/metro-wsit/blob/master/wsit/tests/e2e/testcases/xwss/s11/resources/wsit-client.xml">https://github.com/eclipse-ee4j/metro-wsit/blob/master/wsit/tests/e2e/testcases/xwss/s11/resources/wsit-client.xml</link></para>
                    </listitem>

                    <listitem>
                        <para>An example of a SAML Callback Handler can be
                        viewed and/or downloaded from the following
                        URL:</para>

                        <para><link
                        xlink:href="http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645">http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645</link></para>
                    </listitem>

                    <listitem>
                        <para>An example application in this tutorial that
                        uses a SAML Callback Handler can be found in <xref
                        linkend="ahies" xrefstyle="select:title" /> .</para>
                    </listitem>
                </itemizedlist>

                <para>When writing SAML Callback Handlers for different
                security mechanisms, set the subject confirmation method to SV
                (Sender Vouches) or HOK (Holder of Key) and the appropriate
                SAML Assertion version depending on the SAML version and SAML
                Token Profile selected when setting the security mechanism for
                the service. When the subject confirmation method is HOK, a
                keystore and truststore file must be configured in the
                SAMLCallbackHandler. When the method is SV, you can either
                comment out the keystore and truststore information, or leave
                it, as it will not be used.</para>

                <para>For example, the following code snippet for one of the
                SAMLCallbackHandlers listed above demonstrates how to set the
                subject confirmation method and sets the SAMLAssertion version
                to 1.0, profile 1.0.</para>

                <example>
                    <programlisting language="java" linenumbering="unnumbered">if (callbacks[i] instanceof SAMLCallback) {
    try {

        SAMLCallback samlCallback = (SAMLCallback) callbacks[i];

        /*
         Set confirmation Method to SV [SenderVouches] or
         HOK[Holder of Key]
        */
        samlCallback.setConfirmationMethod(samlCallback
                .SV_ASSERTION_TYPE);

        if (samlCallback.getConfirmationMethod().equals
                (samlCallback.SV_ASSERTION_TYPE)) {
            
            samlCallback.setAssertionElement
                    (createSVSAMLAssertion());

            svAssertion_saml10 = samlCallback.getAssertionElement();
            /*
            samlCallback.setAssertionElement
                (createSVSAMLAssertion20());
            svAssertion_saml20 =
                 samlCallback.getAssertionElement();
            */
        } else if (samlCallback.getConfirmationMethod().equals
                (samlCallback.HOK_ASSERTION_TYPE)) {
            
            samlCallback.setAssertionElement
                    (createHOKSAMLAssertion());
            hokAssertion_saml10 = samlCallback
                    .getAssertionElement();
            /*
            samlCallback.setAssertionElement
                (createHOKSAMLAssertion20());
            hokAssertion_saml20 =
                 samlCallback.getAssertionElement();
            */
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
} else {
    throw unsupportedCallback;
}</programlisting>
                </example>
            </section>
        </section>
    </section>

    <section xml:id="ahicu">
        <title>Security Mechanisms</title>

        <para>This section describes security mechanisms you can implement
        with WSIT. This section provides an overview of the following
        mechanisms:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="ahicv" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahicv1"
                xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahicw" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="SymmBindingKerberos"
                xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahicx" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahicz" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahida" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidb" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidc" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidd" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahide" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidf" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidg" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <para>A table that summarizes the configuration options on the server
        side is available in <xref linkend="ahicn"
        xrefstyle="select:title" />.</para>

        <para>Some common communication issues that need to be addressed using
        security mechanisms are discussed in <xref linkend="ahiff"
        xrefstyle="select:title" />.</para>

        <section xml:id="ahicv">
            <title>Username Authentication with Symmetric Key</title>

            <para>The Username Authentication with Symmetric Key mechanism
            protects your application for integrity and confidentiality.
            Symmetric key cryptography relies on a single, shared secret key
            that is used to both sign and encrypt a message. Symmetric keys
            are usually faster than public key cryptography.</para>

            <para>For this mechanism, the client does not possess any
            certificate/key of his own, but instead sends its
            username/password for authentication. The client shares a secret
            key with the server. The shared, symmetric key is generated at
            runtime and encrypted using the service's certificate. The client
            must specify the alias in the truststore by identifying the
            server's certificate alias.</para>

            <para>See Also: <xref linkend="ahiej"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahicv1">
            <title>Username Authentication with Password Derived Keys</title>

            <para>This feature is same as "Username Authentication with
            Symmetric Key", except that the protection token is Username
            Token.This feature relies on a single, shared secret key that is
            derived using password, salt(a 16 byte random array),iterations(an
            int value).This key will be used for signing and encrypting a
            message.</para>

            <para>For this mechanism, the client does not need to have any
            certificate/key of his own.A 160 bit secret key will be generated
            using password,salt and iterations. This secret key will be used
            for signature/encryption. In the request the username,salt and
            iterations will be send to the server.The server generates the
            same key using the password(which it already has),salt and
            iterations. Using this key the server is able to decrypt the
            message and verify the signature.The default value for iterations
            is 1000.Current Netbeans versions doesn't show this feature in the
            security features list.So for a detailed explanation about this
            feature and to know how to configure this , please visit the blog:
            <link
            xlink:href="http://blogs.sun.com/SureshMandalapu/entry/passwordderivedkeys_support_in_metro">
            http://blogs.sun.com/SureshMandalapu/entry/passwordderivedkeys_support_in_metro
            </link></para>
        </section>

        <section xml:id="ahicw">
            <title>Mutual Certificates Security</title>

            <para>The Mutual Certificates Security mechanism adds security
            through authentication and message protection that ensures
            integrity and confidentiality. When using mutual certificates, a
            keystore and truststore file must be configured for both the
            client and server sides of the application.</para>

            <para>See Also: <xref linkend="ahiem"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="SymmBindingKerberos">
            <title>Symmetric Binding with Kerberos Tokens</title>

            <para>Symmetric Binding with Kerberos Tokens does client
            authentication using Kerberos Tokens and integrity and
            confidentiality protection using symmetric keys generated with
            Kerberos V5 Protocol. This profile assumes that Kerberos
            authentication is supported by the underlying platform and a KDC
            is configured. When using Kerberos Tokens Profile, a Login Module
            must be configured for the service, and a Login Module and Service
            Principal must be specified for the client.</para>

            <note>
                <para>Kerberos is supported in Metro since 1.1 release.
                Netbeans support is available for Kerberos from Metro 1.3
                and Netbeans 6.5 release. Kerberos is NOT supported on AIX 
                systems.</para>
            </note>
                
            <para>See Also: <xref linkend="gfzhh"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahicx">
            <title>Transport Security (SSL)</title>

            <para>The Transport Security mechanism protects your application
            during transport using SSL for authentication and confidentiality.
            Transport-layer security is provided by the transport mechanisms
            used to transmit information over the wire between clients and
            providers, thus transport-layer security relies on secure HTTP
            transport (HTTPS) using Secure Sockets Layer (SSL). Transport
            security is a point-to-point security mechanism that can be used
            for authentication, message integrity, and confidentiality. When
            running over an SSL-protected session, the server and client can
            authenticate one another and negotiate an encryption algorithm and
            cryptographic keys before the application protocol transmits or
            receives its first byte of data. Security is "live" from the time
            it leaves the consumer until it arrives at the provider, or vice
            versa. The problem is that it is not protected once it gets to its
            destination. For protection of data after it reaches its
            destination, use one of the security mechanisms that uses SSL and
            also secures data at the message level.</para>

            <para>Digital certificates are necessary when running secure HTTP
            transport (HTTPS) using Secure Sockets Layer (SSL). The HTTPS
            service of most web servers will not run unless a digital
            certificate has been installed. Digital certificates have already
            been created for GlassFish, and the default certificates are
            sufficient for running this mechanism, and are required when using
            Atomic Transactions (see <xref linkend="using_at"
            xrefstyle="select:title" /> ). However, the message security
            mechanisms require a newer version of certificates than is
            available with GlassFish. You can download valid keystore and
            truststore files for the client and server as described in <xref
            linkend="gfrgz" xrefstyle="select:title" />.</para>

            <para>To use this mechanism, follow the steps in <xref
            linkend="ahidi" xrefstyle="select:title" />.</para>

            <para>See Also: <xref linkend="ahiep"
            xrefstyle="select:title" />.</para>

            <section xml:id="ahicy">
                <title>Transport Security (SSL) Workaround</title>

                <para>This note applies to cases where <code>https</code> is
                the transport protocol used between a WSIT client and a secure
                web service using transport binding, and you are referencing
                <code>localhost</code> when creating the client.</para>

                <note>
                    <para>If you use the fully-qualified hostname (FQHN) in
                    the URL for the service WSDL when you are adding the web
                    service client to the client application, this workaround
                    is not required. It is only required when you specify
                    <code>localhost</code> in the URL for the service
                    WSDL.</para>
                </note>

                <para>During <emphasis>development</emphasis> (not production)
                it is sometimes convenient to use certificates whose CN
                (Common Name) does <emphasis>not</emphasis> match the host
                name in the URL.</para>

                <para>A developer would want to use a CN which is different
                from the host name in the URL in WSIT when using
                <code>https</code> addresses in Dispatch clients and during
                <code>wsimport</code> . The below mentioned workaround is only
                for the Dispatch clients, which are also used in WS-Trust to
                communicate with STS. This has to be done even if the client's
                main service is not on https, but only the STS is on
                https.</para>

                <para>Java by default verifies that the certificate CN (Common
                Name) is the same as host name in the URL. If the CN in the
                certificate is not the same as the host name, your web service
                client fails with the following exception:</para>

                <example>
                    <programlisting linenumbering="unnumbered">jakarta.xml.ws.WebServiceException: java.io.IOException:
HTTPS hostname wrong: should be &lt;hostname as in the certificate&gt;</programlisting>
                </example>

                <para>The recommended way to overcome this issue is to
                generate the server certificate with the Common Name (CN)
                matching the host name.</para>

                <para>To work around this only during development, in your
                client code, you can set the default host name verifier to a
                custom host name verifier which does a custom check. An
                example is given below. It is sometimes necessary to include
                this in the static block of your main Java class as shown
                below to set this verifier before any connections are made to
                the server.</para>

                <example>
                    <programlisting language="java" linenumbering="unnumbered">static {
    //WORKAROUND. TO BE REMOVED.
    javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
            new javax.net.ssl.HostnameVerifier(){
                public boolean verify(String hostname,
                                      javax.net.ssl.SSLSession sslSession) {
                    if (hostname.equals("mytargethostname")) {
                        return true;
                    }
                    return false;
                }
            });
}             </programlisting>
                </example>

                <para>Please remember to remove this code once you install
                valid certificates on the server.</para>
            </section>
        </section>

        <section xml:id="ahicz">
            <title>Message Authentication over SSL</title>

            <para>The Message Authentication over SSL mechanism attaches a
            cryptographically secured identity or authentication token with
            the message and use SSL for confidentiality protection.</para>

            <para>By default, a Username Supporting Token will be used for
            message authentication. To use an X.509 Supporting Token instead,
            click the Configure button and select X509. Under this scenario,
            you will need to configure your system for using SSL as described
            in <xref linkend="ahidi" xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahida">
            <title>SAML Authorization over SSL</title>

            <para>The SAML Authorization over SSL mechanism attaches an
            authorization token with the message and uses SSL for
            confidentiality protection. In this mechanism, the SAML token is
            expected to carry some authorization information about an end
            user. The sender of the token is actually vouching for the
            credentials in the SAML token.</para>

            <para>To use this mechanism, configure SSL on the server, as
            described in <xref linkend="ahidi" xrefstyle="select:title" />,
            and, on the clients side, configure a SAMLCallbackHandler as
            described in <xref linkend="ahict"
            xrefstyle="select:title" />.</para>

            <para>See Also: <xref linkend="ahies"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahidb">
            <title>Endorsing Certificate</title>

            <para>This mechanism uses secure messages using symmetric key for
            integrity and confidentiality protection, and uses an endorsing
            client certificate to augment the claims provided by the token
            associated with the message signature. For this mechanism, the
            client knows the service's certificate, and requests need to be
            endorsed/authorized by a special identity. For example, all
            requests to a vendor must be endorsed by a purchase manager, so
            the certificate of the purchase manager should be used to endorse
            (or counter sign) the original request.</para>
        </section>

        <section xml:id="ahidc">
            <title>SAML Sender Vouches with Certificates</title>

            <para>This mechanism protects messages with mutual certificates
            for integrity and confidentiality and with a Sender Vouches SAML
            token for authorization. The Sender Vouches method establishes the
            correspondence between a SOAP message and the SAML assertions
            added to the SOAP message. The attesting entity provides the
            confirmation evidence that will be used to establish the
            correspondence between the subject of the SAML subject statements
            (in SAML assertions) and SOAP message content. The attesting
            entity, presumed to be different from the subject, vouches for the
            verification of the subject. The receiver has an existing trust
            relationship with the attesting entity. The attesting entity
            protects the assertions (containing the subject statements) in
            combination with the message content against modification by
            another party. For more information about the Sender Vouches
            method, read the SAML Token Profile document at <link
            xlink:href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0.pdf">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0.pdf</link>
            .</para>

            <para>For this mechanism, the SAML token is included as part of
            the message signature as an authorization token and is sent only
            to the recipient. The message payload needs to be signed and
            encrypted. The requestor is vouching for the credentials (present
            in the SAML assertion) of the entity on behalf of which the
            requestor is acting.</para>

            <para>The initiator token, which is an X.509 token, is used for
            signature. The recipient token, which is also an X.509 token, is
            used for encryption. For the server, this is reversed, the
            recipient token is the signature token and the initiator token is
            the encryption token. A SAML token is used for
            authorization.</para>

            <para>See Also: <xref linkend="ahiev"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahidd">
            <title>SAML Holder of Key</title>

            <para>This mechanism protects messages with a signed SAML
            assertion (issued by a trusted authority) carrying client public
            key and authorization information with integrity and
            confidentiality protection using mutual certificates. The
            Holder-of-Key (HOK) method establishes the correspondence between
            a SOAP message and the SAML assertions added to the SOAP message.
            The attesting entity includes a signature that can be verified
            with the key information in the confirmation method of the subject
            statements of the SAML assertion referenced for key info for the
            signature. For more information about the Holder of Key method,
            read the SAML Token Profile document at <link
            xlink:href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0.pdf">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0.pdf</link>
            .</para>

            <para>Under this scenario, the service does not trust the client
            directly, but requires the client to send a SAML assertion issued
            by a particular SAML authority. The client knows the recipient's
            public key, but does not share a direct trust relationship with
            the recipient. The recipient has a trust relationship with the
            authority that issues the SAML token. The request is signed with
            the client's private key and encrypted with the server
            certificate. The response is signed using the server's private key
            and encrypted using the key provided within the HOK SAML
            assertion.</para>
        </section>

        <section xml:id="ahide">
            <title>STS Issued Token</title>

            <para>This security mechanism protects messages using a token
            issued by a trusted Secure Token Service (STS) for message
            integrity and confidentiality protection.</para>

            <para>An STS is a service that implements the protocol defined in
            the WS-Trust specification (you can find a link to this
            specification at <link
            xlink:href="https://eclipse-ee4j.github.io/metro-wsit/">https://eclipse-ee4j.github.io/metro-wsit</link> ).
            This protocol defines message formats and message exchange
            patterns for issuing, renewing, canceling, and validating security
            tokens.</para>

            <para>Service providers and consumers are in potentially different
            managed environments but use a single STS to establish a chain of
            trust. The service does not trust the client directly, but instead
            trusts tokens issued by a designated STS. In other words, the STS
            is taking on the role of a second service with which the client
            has to securely authenticate. The issued tokens contain a key,
            which is encrypted for the server and which is used for deriving
            new keys for signing and encrypting.</para>

            <para>To use this mechanism for the web service, you simply select
            this option as your security mechanism. However, you must have a
            Security Token Service that can be referenced by the service. An
            example of an STS can be found in the section <xref
            linkend="gfrlq" xrefstyle="select:title" /> . In this section, you
            select a security mechanism for the STS. The security
            configuration for the client-side of this application is dependent
            upon the security mechanism selected for the STS, and not on the
            security mechanism selected for the application. The client
            truststore must contain the certificate of the STS, which has the
            alias of <code>wssip</code> if you are using the updated GlassFish
            certificates.</para>

            <para>See Also: <xref linkend="ahiey"
            xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahidf">
            <title>STS Issued Token with Service Certificate</title>

            <para>This security mechanism is similar to the one discussed in
            <xref linkend="ahide" xrefstyle="select:title" /> , with the
            difference being that in addition to the service requiring the
            client to authenticate using a SAML token issued by a designated
            STS, confidentiality protection is achieved using a service
            certificate. A service certificate is Unhandled tag caution used
            by a client to authenticate the service and provide message
            protection. For GlassFish, a default certificate of
            <code>s1as</code> is installed.</para>

            <para>To use this mechanism for the web service, you simply select
            this option as your security mechanism. However, you must have a
            Security Token Service that can be referenced by the service. An
            example of an STS can be found in the section <xref
            linkend="gfrlq" xrefstyle="select:title" /> . In this section, you
            select a security mechanism for the STS. The security
            configuration for the client-side of this application is dependent
            upon the security mechanism selected for the STS, and not on the
            security mechanism selected for the application. The client
            truststore must contain the certificate of the STS, which has the
            alias of <code>wssip</code> if you are using the updated GlassFish
            certificates.</para>
        </section>

        <section xml:id="ahidg">
            <title>STS Issued Endorsing Token</title>

            <para>This security mechanism is similar to the one discussed in
            <xref linkend="ahide" xrefstyle="select:title" /> , with the
            difference being that the client authenticates using a SAML token
            that is issued by a designated STS. An endorsing token is used to
            sign the message signature.</para>

            <para>In this mechanism, message integrity and confidentiality are
            protected using ephemeral keys encrypted for the service.
            Ephemeral keys use an algorithm where the exchange key value is
            purged from the cryptographic service provider (CSP) when the key
            handle is destroyed. The service requires messages to be endorsed
            by a SAML token issued by a designated STS.</para>

            <para>Service providers and consumers are in potentially different
            managed environments. For this mechanism, the service requires
            that secure communications be endorsed by a trusted STS. The
            service does not trust the client directly, but instead trusts
            tokens issued by a designated STS. In other words, the STS is
            taking on the role of a second service with which the client has
            to securely authenticate.</para>

            <para>For this mechanism, authentication of the client is achieved
            in this way:</para>

            <itemizedlist>
                <listitem>
                    <para>The client authenticates with the STS and obtains
                    the necessary token with credentials.</para>
                </listitem>

                <listitem>
                    <para>The client's request is signed and encrypted using
                    ephemeral key K.</para>
                </listitem>

                <listitem>
                    <para>The server's response is signed and encrypted using
                    the same K.</para>
                </listitem>

                <listitem>
                    <para>The primary signature of the request is endorsed
                    using the issued token.</para>
                </listitem>
            </itemizedlist>

            <para>To use this mechanism for the web service, you simply select
            this option as your security mechanism. However, you must have a
            Security Token Service that can be referenced by the service. An
            example of an STS can be found in the section <xref
            linkend="gfrlq" xrefstyle="select:title" /> . In this section, you
            select a security mechanism for the STS. The security
            configuration for the client-side of this application is dependent
            upon the security mechanism selected for the STS, and not on the
            security mechanism selected for the application. The client
            truststore must contain the certificate of the STS, which has the
            alias of <code>wssip</code> if you are using the updated GlassFish
            certificates.</para>
        </section>
    </section>

    <section xml:id="ahidh">
        <title>Configuring SSL and Authorized Users</title>

        <para>This section discusses configuring security for your web service
        and web service client using the WSIT security mechanisms. Some of
        these mechanisms require some configuration outside of NetBeans IDE.
        Depending upon which security mechanism you plan to use, some of the
        following tasks will need to be completed:</para>

        <itemizedlist>
            <listitem>
                <para>If you are using the GlassFish container and
                <emphasis>message</emphasis> security, you must update the
                GlassFish keystore and truststore by importing v3
                certificates. The procedure for updating the certificates is
                described in <xref linkend="gfrgz"
                xrefstyle="select:title" />.</para>
            </listitem>

            <listitem>
                <para>If you are using a security mechanism that requires a
                user to enter a user name and password, create authorized
                users for your container. Steps for creating an authorized
                user for the GlassFish container are described in <xref
                linkend="ahidj" xrefstyle="select:title" />.</para>
            </listitem>

            <listitem>
                <para>To use a mechanism that uses secure transport (SSL), you
                must configure the <emphasis>system</emphasis> to point to the
                client and server keystore and truststore files. Steps for
                doing this are described in <xref linkend="ahidi"
                xrefstyle="select:title" />.</para>
            </listitem>
        </itemizedlist>

        <para>This section covers the following topics:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="ahidi" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidj" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <section xml:id="ahidi">
            <title>Configuring SSL For Your Applications</title>

            <para>This section describes adding the steps to configure your
            application for SSL. These steps will need to be accomplished for
            any application that uses one of the mechanisms:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="ahicx" xrefstyle="select:title" />
                    (see <xref linkend="ahiep" xrefstyle="select:title" />
                    )</para>
                </listitem>

                <listitem>
                    <para><xref linkend="ahicz"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="ahida" xrefstyle="select:title" />
                    (see <xref linkend="ahies" xrefstyle="select:title" />
                    )</para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrgq">
                <title>To Configure SSL for Your Application</title>

                <tasksummary>
                    <para>The following steps are generic to any application,
                    but have example configurations that will work with the
                    tutorial examples, in particular, <xref linkend="ahies"
                    xrefstyle="select:title" /> and <xref linkend="ahiep"
                    xrefstyle="select:title" />.</para>

                    <para>To configure SSL for your application, follow these
                    steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold">Select one of the
                        mechanisms that require SSL.</emphasis></para>

                        <para>These include <xref linkend="ahicx"
                        xrefstyle="select:title" />, <xref linkend="ahicz"
                        xrefstyle="select:title" />, and<xref linkend="ahida"
                        xrefstyle="select:title" />.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Server
                        Configuration</emphasis></para>

                        <stepalternatives>
                            <step>
                                <para>GlassFish is already configured for SSL. No
                                further SSL configuration is necessary if you are
                                using Transport Security. However, if you are using
                                one of the Message Security mechanisms with SSL, you
                                must update the GlassFish certificates as described
                                in <xref linkend="gfrgz"
                                xrefstyle="select:title" />.</para>
                            </step>

                            <step>
                                <para>Configure a user on GlassFish as described in
                                <xref linkend="ahidj"
                                xrefstyle="select:title" />.</para>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Client
                        Configuration</emphasis></para>

                        <para>For configuring your system for SSL in order to
                        work through the examples in this tutorial, the same
                        keystore and truststore files are used for both the
                        client and the service. This makes it unnecessary to
                        set system properties to point to the client stores,
                        as both GlassFish and NetBeans IDE are aware of these
                        certificates and point to them by default.</para>

                        <para>In general, for the client side of SSL you will
                        not be using the same certificates for the client and
                        the service. In that case, you need to define the
                        client certificate stores by setting the system
                        properties <code>-Djavax.net.ssl.trustStore</code> ,
                        <code>-Djavax.net.ssl.keyStore</code> ,
                        <code>-Djavax.net.ssl.trustStorePassword</code> , and
                        <code>-Djavax.net.ssl.keyStorePassword</code> in the
                        application client container.</para>

                        <para>You can specify the environment variables for
                        keystore and truststore by setting the environment
                        variable <code>VMARGS</code> through the shell
                        environment or inside an Ant script, or by passing
                        them in when you start NetBeans IDE from the command
                        line. For example, in the latter case, you would
                        specify the property settings as follows:</para>

                        <programlisting><emphasis role="bold"><emphasis>netbeans-install</emphasis>/bin/netbeans.exe
-J-Djavax.net.ssl.trustStore=<emphasis>as-install</emphasis>/domains/domain1/config/cacerts.jks
-J-Djavax.net.ssl.keyStore=<emphasis>as-install</emphasis>/domains/domain1/config/keystore.jks
-J-Djavax.net.ssl.trustStorePassword=changeit
-J-Djavax.net.ssl.keyStorePassword=changeit</emphasis></programlisting>

                        <para>Use the hard-coded path to the keystore and
                        truststore files, not variables.</para>

                        <para>For the SSL mechanism, the browser will prompt
                        you to accept the server alias
                        <code>s1as</code>.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Service
                        Configuration</emphasis></para>

                        <para>To require the service to use the HTTPS
                        protocol, you must select a security mechanism that
                        uses SSL (as described in a previous step), and you
                        have to specify the security requirements in the
                        service's application deployment descriptor. This file
                        is <code>ejb-jar.xml</code> for a web service that is
                        implemented as an EJB endpoint, and
                        <code>web.xml</code> for a web service implemented as
                        a servlet. To specify the security information, follow
                        these steps:</para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold">From your web service
                                application, expand Web Pages |
                                WEB-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                <code>web.xml</code> (or <code>ejb-jar.xml</code> )
                                to open it in the editor. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the Security
                                tab.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> On the Security
                                Constraints line, expand the node for SSL transport
                                for CalculatorWSService. This will display when a
                                security mechanism that requires SSL is selected.
                                This constraint will be sufficient for the example
                                applications. This sections walks you through making
                                some changes in the event that you would like to
                                customize the security constraint for your
                                application. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Under Web Resource
                                Collection, click Edit.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Change the URL Pattern
                                to be protected (for example, <code>/*</code> ).
                                Select which HTTP Methods to protect, for example,
                                POST. Click OK to close this dialog.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Unselect Enable
                                Authentication Constraint. Ensure that the Enable
                                User Data Constraint box is checked. Verify that
                                CONFIDENTIAL is selected for the Transport Guarantee
                                to specify that the application uses SSL because the
                                application requires that data be transmitted so as
                                to prevent other entities from observing the
                                contents of the transmission. </emphasis></para>

                                <para>The IDE appears as shown in <xref
                                linkend="gfrgi" xrefstyle="select:title" />.</para>

                                <figure xml:id="gfrgi">
                                    <title>Deployment Descriptor Page</title>

                                    <mediaobject>
                                        <imageobject>
                                            <imagedata contentdepth="100%"
                                                       fileref="figures/security-web-xml.png"
                                                       scalefit="1" width="100%"/>
                                        </imageobject>

                                        <textobject>
                                            <simpara>Screen shot of deployment descriptor
                                            page</simpara>
                                        </textobject>
                                    </mediaobject>
                                </figure>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Click the XML tab to
                                display the additions to <code>web.xml</code> . The
                                security constraint looks like this:
                                </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;security-constraint&gt;
    &lt;display-name&gt;Constraint1&lt;/display-name&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;CalcWebResource&lt;/web-resource-name&gt;
        &lt;description/&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
        &lt;http-method&gt;POST&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;user-data-constraint&gt;
        &lt;description/&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;</programlisting>
                                </example>
                            </step>

                            <step>
                                <para><emphasis role="bold"> When you run this
                                project (right-click, select Run), the browser will
                                ask you to accept the server certificate of
                                <code>s1as</code> . Accept this certificate. The
                                WSDL appears in the browser. </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold">Creating a
                        Client</emphasis></para>

                        <para>When creating your client application, use the
                        fully-qualified hostname to specify the secure WSDL
                        location (use <code>https://</code>
                        <emphasis>fully_qualified_hostname</emphasis>
                        <code>:8181/CalculatorApplication/CalculatorWSService?wsdl</code>
                        , for example, in place of
                        <code>http://localhost:8080/CalculatorApplication/CalculatorWSService?wsdl</code>
                        ).</para>

                        <para>In some cases, you might get an error dialog
                        telling you that the URL <code>https://</code>
                        <emphasis>fully_qualified_hostname</emphasis>
                        <code>:8181/CalculatorApplication/CalculatorWSService?wsdl</code>
                        couldn't be downloaded. However, this is the correct
                        URL, and it does load when you run the service. So,
                        when this error occurs, repeat the steps that create
                        the Web Service Client using the secure WSDL. The
                        second time, the web service reference is created and
                        you can continue creating the client.</para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahidj">
            <title>Adding Users to GlassFish</title>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfxzy"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrib"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrgr"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfxzy">
                <title>To Add a User to GlassFish for Development</title>

                <tasksummary>
                    <para>To create a user in the GlassFish file realm to be
                    used for testing and development purposes, follow these
                    steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> In NetBeans IDE,
                        right-click the web service, select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>

                        <para>In addition to setting up keystore and
                        truststore files, this option creates a default user
                        on GlassFish. The user has the name
                        <code>wsitUser</code> and the password of
                        <code>changeit</code> .</para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrib">
                <title>To Add Users to GlassFish Using the Admin
                Console</title>

                <tasksummary>
                    <para>To add users to GlassFish using the Admin Console,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold">Start GlassFish if you
                        haven't already done so.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Start the Admin Console
                        if you haven't already done so. </emphasis></para>

                        <para>You can start the Admin Console by starting a
                        web browser and specifying the URL
                        <code>http://localhost:4848/asadmin</code> . If you
                        changed the default Admin port during installation,
                        type the correct port number in place of 4848.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> To log in to the Admin
                        Console, type the user name and password of a user in
                        the <code>admin-realm</code> who belongs to the
                        <code>asadmin</code> group. </emphasis></para>

                        <para>The name ( <code>admin</code> ) and password (
                        <code>adminadmin</code> ) entered during installation
                        will work, as will any users added to this realm and
                        group subsequent to installation.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Configuration
                        node in the Admin Console tree.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Security node
                        in the Admin Console tree.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand the Realms node,
                        then select the <code>file</code> realm.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click the Manage Users
                        button.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click New to add a new
                        user to the realm.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type the correct
                        information into the User ID, Password, and Group(s)
                        fields. </emphasis></para>

                        <para>The example applications reference a user with
                        the following attributes:</para>

                        <stepalternatives>
                            <step>
                                <para>User ID = <code>wsitUser</code></para>
                            </step>

                            <step>
                                <para>Group List = <code>wsit</code></para>
                            </step>

                            <step>
                                <para>New Password = <code>changeit</code></para>
                            </step>

                            <step>
                                <para>Confirm New Password =
                                <code>changeit</code></para>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click OK to add this user
                        to the list of users in the realm. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click Logout when you have
                        completed this task.</emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrgr">
                <title>To Add Users to GlassFish From the Command Line</title>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Make sure GlassFish is
                        running, then type the following command: </emphasis>
                        <programlisting><emphasis role="bold"><emphasis>as-install</emphasis>/bin/asadmin create-file-user --groups wsit wsitUser</emphasis></programlisting></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> When you are prompted for
                        the password, type <code>changeit</code> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>
    </section>

    <section xml:id="ahidm">
        <title>Configuring Keystores and Truststores</title>

        <para>This section describes configuring keystores and truststores.
        Security mechanisms that use certificates require keystore and
        truststore files for deployment.</para>

        <itemizedlist>
            <listitem>
                <para>For GlassFish, default keystore and truststore files
                come bundled. However, WSIT security mechanisms for
                <emphasis>message</emphasis> security require X.509 version 3
                certificates. GlassFish contains version 1 certificates.
                Therefore, to enable the WSIT applications to run on
                GlassFish, you will need to follow the instructions in <xref
                linkend="gfrgz" xrefstyle="select:title" /> .</para>
            </listitem>

            <listitem>
                <para>For Tomcat, keystore and truststore files do not come
                bundled with this container, so they must be provided. You can
                download valid keystore and truststore files for the client
                and server from <link
                xlink:href="http://xwss.java.net/">http://xwss.java.net/</link>
                .</para>
            </listitem>
        </itemizedlist>

        <para>This section covers the following topics:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="gfxyu" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="gfrgz" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahido" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidr" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahidx" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <task xml:id="gfxyu">
            <title>To Automatically Update GlassFish Certificates</title>

            <tasksummary>
                <para>You can have NetBeans automatically update the GlassFish
                certificates to the version needed to work with message
                security. To do this, follow these steps:</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold"> In NetBeans IDE, right-click
                    the web service, select Edit Web Service Attributes.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Secure
                    Service.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Use Development
                    Defaults.</emphasis></para>

                    <para>This option imports certificates into the GlassFish
                    keystore and truststore so that they can be used
                    immediately for development.</para>

                    <para>In a production environment, you should provide your
                    own certificates and user settings, however, in a
                    development environment you may find these defaults
                    useful.</para>
                </step>
            </procedure>
        </task>

        <task xml:id="gfrgz">
            <title>To Manually Update GlassFish Certificates</title>

            <tasksummary>
                <para>The WSIT message security mechanisms require the use of
                v3 certificates. The default GlassFish keystore and truststore
                Unhandled tag varname do not contain v3 certificates at this
                time (but should before FCS). (GlassFish instances installed
                using JDK 1.6 do have a v3 certificate but the certificate
                lacks a particular extension required for supporting some
                secure WSIT mechanisms.) In order to use message security
                mechanisms with GlassFish, it is necessary to download
                keystore and truststore files that contain v3 certificates and
                import the appropriate certificates into the default GlassFish
                stores.</para>

                <note>
                    <para>The XWSS keystores are <emphasis>sample</emphasis>
                    keystores containing sample v3 certificates. These sample
                    keystores can be used for development and testing of
                    security with WSIT technology. Once an application is in
                    production, you should definitely use your own v3
                    certificates issued by a trusted authority. In order to
                    use WSIT security on GlassFish, you will have to import
                    your trusted stores into GlassFish's keystore and specify
                    those certificates from NetBeans IDE.</para>
                </note>

                <para>To manually update the GlassFish certificates, follow
                these steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold"> Download the zip file that
                    contains the certificates and the Ant scripts (
                    <code>copyv3.zip</code> ) by going to this URL:
                    </emphasis></para>

                    <para><link
                    xlink:href="https://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645">https://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645</link></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Unzip this file and change
                    into its directory, <code>copyv3</code> .
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Set the variable to the
                    location where GlassFish is installed, as described in the
                    <code>README.txt</code> file in this directory.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> From the <code>copyv3</code>
                    directory, execute the Ant command that will copy the
                    keystore and truststore files to the appropriate location,
                    and import the appropriate certificates into the GlassFish
                    keystore and truststore. </emphasis></para>

                    <para>This Ant command is as follows:</para>

                    <programlisting><emphasis role="bold"><emphasis>as-install</emphasis>/lib/ant/bin/ant</emphasis></programlisting>

                    <para>The command window will echo back the certificates
                    that are being added to the keystore and truststore files,
                    and should look something like this:</para>

                    <programlisting>[echo] WARNING: currently we add non-CA certs to GF truststore, this
will not be required in later releases when WSIT starts supporting CertStore(s)
[java] Added Key Entry  :xws-security-server
[java] Added Key Entry  :xws-security-client
[java] Added Trusted Entry  :xwss-certificate-authority
[java] Added Key Entry  :wssip
[java] Added Trusted Entry  :xws-security-client
[java] Added Trusted Entry  :xws-security-server
[java] Added Trusted Entry  :wssip
[echo] Adding JVM Option for https outbound alias, this will take at least
One Minute.
...</programlisting>
                </step>

                <step>
                    <para><emphasis role="bold"> To verify that the updates
                    were successful, follow these steps: </emphasis></para>

                    <substeps>
                        <step>
                            <para><emphasis role="bold"> Change to the directory
                            containing the GlassFish keystore and truststore
                            files, <code> as-install /domains/domain1/config
                            </code> . </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Verify that the v3
                            certificate has been imported into the GlassFish
                            truststore. To do this, run the following
                            <code>keytool</code> command (all on one line):
                            </emphasis></para>

                            <programlisting><emphasis role="bold"><emphasis>java-home</emphasis>/bin/keytool -list -keystore cacerts.jks -alias wssip -storepass changeit</emphasis></programlisting>

                            <para>If the certificates are
                            <emphasis>successfully</emphasis> updated, your
                            response will look something like this:</para>

                            <programlisting>wssip, Aug 20, 2007, trustedCertEntry,
Certificate fingerprint (MD5): 1A:0E:E9:69:7D:D0:80:AD:5C:85:47:91:EB:0D:11:B1</programlisting>

                            <para>If the certificates were
                            <emphasis>not</emphasis> successfully update, your
                            response will look something like this:</para>

                            <programlisting>keytool error: java.lang.Exception: Alias &lt;wssip&gt; does not exist</programlisting>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Verify that the v3
                            certificate has been imported into the GlassFish
                            keystore. To do this, run the following
                            <code>keytool</code> commands: </emphasis></para>

                            <programlisting><emphasis role="bold"><emphasis>java-home</emphasis>/bin/keytool -list -keystore keystore.jks
-alias xws-security-server -storepass changeit
<emphasis>java-home</emphasis>/bin/keytool -list -keystore keystore.jks
-alias xws-security-client -storepass changeit</emphasis></programlisting>

                            <para>If the certificates were
                            <emphasis>successfully</emphasis> updated, your
                            response should look something like this:</para>

                            <programlisting>xws-security-server, Aug 20, 2007, PrivateKeyEntry,
Certificate fingerprint (MD5): E4:E3:A9:02:3C:B0:36:0C:C1:48:6E:0E:3E:5C:5E:84</programlisting>

                            <para>If your certificates were
                            <emphasis>not</emphasis> successfully updated, your
                            response will look more like this:</para>

                            <programlisting>keytool error: java.lang.Exception: Alias &lt;xws-security-server&gt; does not exist</programlisting>
                        </step>
                    </substeps>
                </step>
            </procedure>
        </task>

        <section xml:id="ahido">
            <title>Specifying Aliases with the Updated Stores</title>

            <para>The configuration of the aliases for all containers (Tomcat,
            GlassFish) and for all applications (JSR-109-compliant and
            non-JSR-109-compliant), except for applications that use a
            Security Token Service (STS) mechanism, is as shown in <xref
            linkend="ahidp" xrefstyle="select:title" /> .</para>

            <table frame="all" xml:id="ahidp">
                <title>Keystore and Truststore Aliases</title>

                <tgroup cols="3" colsep="1" rowsep="1">
                    <colspec colwidth="2*" />

                    <colspec />

                    <colspec />

                    <thead>
                        <row>
                            <entry>
                                <para/></entry>

                            <entry><para>Keystore Alias</para></entry>

                            <entry><para>Truststore Alias</para></entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><para>Client-Side
                            Configuration</para></entry>

                            <entry><para>xws-security-client</para></entry>

                            <entry><para>xws-security-server</para></entry>
                        </row>

                        <row>
                            <entry><para>Server-Side
                            Configuration</para></entry>

                            <entry><para>xws-security-server</para></entry>

                            <entry><para>xws-security-client</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>The configuration of the aliases for applications that use a
            Security Token Service (STS) mechanism is as shown in <xref
            linkend="ahidq" xrefstyle="select:title" /> .</para>

            <table frame="all" xml:id="ahidq">
                <title>Keystore and Truststore Aliases for STS</title>

                <tgroup cols="3" colsep="1" rowsep="1">
                    <colspec colwidth="2*" />

                    <colspec />

                    <colspec />

                    <thead>
                        <row>
                            <entry>
                                <para/></entry>

                            <entry><para>Keystore Alias</para></entry>

                            <entry><para>Truststore Alias</para></entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><para>Client-Side
                            Configuration</para></entry>

                            <entry><para>xws-security-client</para></entry>

                            <entry><para>xws-security-server</para></entry>
                        </row>

                        <row>
                            <entry><para>STS Configuration</para></entry>

                            <entry><para>xws-security-client</para></entry>

                            <entry><para>wssip</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>

        <section xml:id="ahidr">
            <title>Configuring the Keystore and Truststore</title>

            <para>NetBeans IDE already knows the location of the default
            keystore file and its password, but you need to specify which
            alias is to be used. The following sections discuss configuring
            the keystore on the service and on the client.</para>

            <task xml:id="gfxzl">
                <title>To Configure the Keystore on a Service
                Automatically</title>

                <tasksummary>
                    <para>To have NetBeans IDE configure the keystore to its
                    default values, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> In NetBeans IDE,
                        right-click the web service, select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>

                        <para>This option imports certificates into the
                        GlassFish keystore and truststore so that they can be
                        used immediately for development. This option also
                        inserts the location and alias of the keystore and
                        truststore files into the configuration file.</para>

                        <para>In a production environment, you should provide
                        your own certificates and user settings, however, in a
                        development environment you may find these defaults
                        useful.</para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfril">
                <title>To Configure the Keystore on a Service Manually</title>

                <tasksummary>
                    <para>A keystore is a database of private keys and their
                    associated X.509 certificate chains authenticating the
                    corresponding public keys. A key is a piece of information
                    that controls the operation of a cryptographic algorithm.
                    For example, in encryption, a key specifies the particular
                    transformation of plaintext into ciphertext, or vice versa
                    during decryption. Keys are used in digital signatures for
                    authentication.</para>

                    <para>To configure a keystore on a service, perform the
                    following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Check the table in <xref
                        linkend="ahicn" xrefstyle="select:title" /> to see if
                        a keystore needs to be configured for the selected
                        security mechanism. If so, continue.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the web
                        service and select Edit Web Service Attributes.
                        </emphasis></para>

                        <para>The Web Service Attributes editor is
                        displayed.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Enable Secure Service,
                        then select a security mechanism.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Check the table in <xref
                        linkend="ahicn" xrefstyle="select:title" /> to see
                        what keystore configuration, if any, is required for
                        that mechanism. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Unselect Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click the Keystore
                        button. The dialog shown in <xref linkend="ahidt"
                        xrefstyle="select:title" /> displays. </emphasis>
                        <figure xml:id="ahidt">
                                <title>Keystore Configuration Dialog</title>

                                <mediaobject>
                                    <imageobject>
                                        <imagedata contentdepth="100%"
                                                   fileref="figures/security-keystore-configuration.png"
                                                   scalefit="1" width="100%"/>
                                    </imageobject>

                                    <textobject>
                                        <simpara>Screen shot of keystore configuration
                                        dialog</simpara>
                                    </textobject>
                                </mediaobject>
                            </figure></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Depending on what is
                        required for the selected mechanism, you may specify
                        the following information in the Keystore
                        Configuration dialog: </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis>Keystore Password</emphasis> :
                                Specifies the password for the keystore file. If you
                                are running under GlassFish, GlassFish's password is
                                already entered. If you have changed the keystore's
                                password from the default, you must specify the
                                correct value in this field.</para>
                            </step>

                            <step>
                                <para><emphasis>Load Aliases</emphasis> : Click the
                                Load Aliases button to populate the Alias field with
                                the aliases contained in the keystore file. The
                                Location and Store Password fields must be specified
                                correctly for this option to work.</para>
                            </step>

                            <step>
                                <para><emphasis>Alias</emphasis> : Specifies the
                                alias of the certificate in the specified keystore
                                to be used for authentication. Refer to the table in
                                <xref linkend="ahido" xrefstyle="select:title" /> to
                                determine which alias to choose for the selected
                                security mechanism.</para>
                            </step>

                            <step>
                                <para><emphasis>Key Password</emphasis> : Specifies
                                the password of the key within the keystore. For
                                this sample, leave this blank. For this field, the
                                default assumes the key password is the same as the
                                store password, so you only need to specify this
                                field when the key password is different.</para>
                            </step>
                        </stepalternatives>

                        <note>
                            <para>The Key Password field enables you to specify
                            a password for the keystore used by the application.
                            When specified, this password is stored in a WSIT
                            configuration file in clear text, which is a
                            security risk. Setting the keystore password in the
                            development environment is fine, however, when you
                            go into production, remember to use the container's
                            Callback Handler to obtain the keys from the
                            keystore. This eliminates the need for the keystore
                            passwords to be supplied by the users. You can also
                            specify the passwords for keystores and truststores
                            by specifying a Callback Handler class that
                            implements the
                            <code>javax.security.auth.callback.CallbackHandler</code>
                            interface in the Key Password or Store Password
                            fields.</para>
                        </note>

                        <para>When creating JSR-109-compliant application,
                        GlassFish will only use the default CallbackHandlers
                        and Validators, and you cannot override the location
                        of the keystore and truststore files. Any attempt to
                        override the default location will be ignored. You do,
                        however, need to specify the keystore and truststore
                        locations in these dialogs in order to specify the
                        alias.</para>

                        <para>When creating non-JSR-109-compliant application,
                        you can specify the passwords for keystores and
                        truststores by specifying a
                        <code>CallbackHandler</code> class that implements the
                        <code>javax.security.auth.callback.CallbackHandler</code>
                        interface in the Key Password or Store Password
                        fields.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfxyn">
                <title>To Configure the Truststore on a Service
                Automatically</title>

                <tasksummary>
                    <para>To have NetBeans IDE configure the truststore to its
                    default values, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> In NetBeans IDE,
                        right-click the web service, select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>

                        <para>This option imports certificates into the
                        GlassFish keystore and truststore so that they can be
                        used immediately for development. This option also
                        inserts the location and alias of the keystore and
                        truststore files into the configuration file, when
                        required for a selected security mechanism.</para>

                        <para>In a production environment, you should provide
                        your own certificates and user settings, however, in a
                        development environment you may find these defaults
                        useful.</para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrgu">
                <title>To Configure the Truststore on a Service
                Manually</title>

                <tasksummary>
                    <para>A truststore is a database of trusted entities and
                    their associated X.509 certificate chains authenticating
                    the corresponding public keys.</para>

                    <para>The truststore contains the Certificate Authority
                    (CA) certificates and the certificates of the other party
                    to which this entity intends to send encrypted
                    (confidential) data. This file must contain the public key
                    certificates of the CA and the client's public key
                    certificate. Any kind of encryption without
                    WS-SecureConversation will generally require that a
                    truststore be configured on the client side. Any kind of
                    signature without WS-SecureConversation will generally
                    require a truststore on the server side.</para>

                    <note>
                        <para>For this release, place the trusted certificates
                        of other parties in GlassFish's truststore,
                        <code>cacerts.jks</code> . This is not normally a
                        recommended practice because any certificate you add
                        to the <code>cacerts.jks</code> file effectively means
                        it can be a trusted root for any and all certificate
                        chains, which can be a security problem. In future
                        releases, trusted certificates from other parties will
                        be placed in a certstore, and only trusted roots will
                        be placed inside <code>cacerts.jks</code> .</para>
                    </note>

                    <para>To set the truststore configuration options on a
                    service, perform the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Check the table in <xref
                        linkend="ahicn" xrefstyle="select:title" /> to see if
                        a truststore is required for the selected security
                        mechanism. If so, continue. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the web
                        service and select Edit Web Service Attributes.
                        </emphasis></para>

                        <para>The Web Service Attributes editor is
                        displayed.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Enable Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Unselect Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click the Truststore
                        button.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> On the Truststore
                        Configuration page, specify the following options:
                        </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis>Location</emphasis> : By default,
                                the location and name of the truststore that stores
                                the public key certificates of the CA and the
                                client's public key certificate is already entered.
                                The GlassFish truststore file is <code>as-install
                                /domains/domain1/config/cacerts.jks</code>.</para>
                            </step>

                            <step>
                                <para><emphasis>Store Password</emphasis> :
                                Specifies the password for the truststore. If you
                                are using GlassFish, the value of
                                <code>changeit</code> is already entered. If you
                                have changed the value of the truststore password,
                                you must type the new value in this field.</para>

                                <note>
                                    <para>The Store Password field enables you to
                                    specify a password for the truststore used by the
                                    application. When specified, this password is stored
                                    in a WSIT configuration file in clear text, which is
                                    a security risk. Setting the truststore password in
                                    the development environment is fine, however, when
                                    you go into production, remember to use the
                                    container's Callback Handler to obtain the keys from
                                    the truststore. This eliminates the need for the
                                    truststore passwords to be supplied by the users.
                                    You can also specify the passwords for keystores and
                                    truststores by specifying a CallbackHandler class
                                    that implements the
                                    <code>javax.security.auth.callback.CallbackHandler</code>
                                    interface in the Key Password or Store Password
                                    fields.</para>

                                    <para>When creating JSR-109-compliant application,
                                    GlassFish will only use the default CallbackHandlers
                                    and Validators, and you cannot override the location
                                    of the keystore and truststore files. Any attempt to
                                    override the default location will be ignored. You
                                    do, however, need to specify the keystore and
                                    truststore locations in these dialogs in order to
                                    specify the alias.</para>
                                </note>
                            </step>

                            <step>
                                <para><emphasis>Load Aliases</emphasis> : Click the
                                Load Aliases button to populate the Alias field with
                                the aliases contained in the truststore file. The
                                Location and Store Password fields must be specified
                                correctly for this option to work.</para>
                            </step>

                            <step>
                                <para><emphasis>Alias</emphasis> : Unhandled tag tip
                                Specifies the peer alias of the certificate in the
                                truststore that is to be used when the client needs
                                to send encrypted data. Refer to the table in <xref
                                linkend="ahido" xrefstyle="select:title" /> to
                                determine which alias is appropriate for the
                                selected security mechanism. A truststore contains
                                trusted other-party certificates and certificates of
                                Certificate Authorities (CA). A peer alias is the
                                alias of the other party (peer) that the sending
                                party needs to use to encrypt the request.</para>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrgh">
                <title>To Configure the Keystore and Truststore on a
                Client</title>

                <tasksummary>
                    <para>On the client side, a keystore and truststore file
                    must be configured for some of the security mechanisms.
                    Refer to the table in <xref linkend="ahicp"
                    xrefstyle="select:title" /> for information on which
                    mechanisms require the configuration of keystores and
                    truststores.</para>

                    <para>If the mechanism configured for the service requires
                    the configuration of keystores and truststores, follow
                    these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Check the table in <xref
                        linkend="ahicp" xrefstyle="select:title" /> to see if
                        a keystore needs to be configured for the client for
                        the selected security mechanism. If so, continue.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Projects window,
                        expand the node for the web service client.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Web Service
                        References node.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the node for
                        the web service reference for which you want to
                        configure security options. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Edit Web Service
                        Attributes.</emphasis></para>

                        <para>When the Web Service References Attributes
                        Editor is opened, select the Quality of Service tab to
                        display the WSIT Security options.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Keystore or
                        Truststore to specify the keystore or truststore
                        information if required by the service.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Depending on what is
                        required for the selected mechanism, you may specify
                        the following information: </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis>Keystore Location</emphasis> : The
                                directory and file name containing the certificate
                                key to be used to authenticate the client. By
                                default, the location is already set to the default
                                GlassFish keystore, <code> as-install
                                /domains/domain1/config/keystore.jks </code>
                                .</para>
                            </step>

                            <step>
                                <para><emphasis>Keystore Password</emphasis> : The
                                password for the keystore used by the client. By
                                default, the password for the GlassFish keystore is
                                already entered. This password is
                                <code>changeit</code> .</para>

                                <note>
                                    <para>When specified, this password is stored in a
                                    WSIT configuration file in clear text. Setting the
                                    keystore password in the development environment is
                                    fine, however, when you go into production, remember
                                    to use the container's default
                                    <code>CallbackHandler</code> to obtain the keys from
                                    the keystore. This eliminates the need for the
                                    keystore passwords to be supplied by the users. You
                                    can also specify the passwords for keystores and
                                    truststores by specifying a
                                    <code>CallbackHandler</code> class that implements
                                    the
                                    <code>javax.security.auth.callback.CallbackHandler</code>
                                    interface in the Keystore Password, Truststore
                                    Password, or Key Password fields.</para>
                                </note>
                            </step>

                            <step>
                                <para><emphasis>Load Aliases</emphasis> : Click this
                                button to populate the Alias list with all of the
                                certificates available in the selected keystore.
                                This option will only work if the keystore location
                                and password are correct.</para>
                            </step>

                            <step>
                                <para><emphasis>Keystore Alias</emphasis> : Select
                                the alias in the keystore. Refer to the table in
                                <xref linkend="ahido" xrefstyle="select:title" /> to
                                determine which alias is appropriate for the
                                selected security mechanism.</para>
                            </step>

                            <step>
                                <para><emphasis>Key Password</emphasis> : If the
                                client key has been password-protected, type the
                                password for this key. The GlassFish certificate key
                                password is <code>changeit</code> .</para>
                            </step>

                            <step>
                                <para><emphasis>Truststore Location</emphasis> : The
                                directory and file name of the client truststore
                                containing the certificate of the server. By
                                default, this field points to the default GlassFish
                                truststore, <code> as-install
                                /domains/domain1/config/cacerts.jks</code>.</para>
                            </step>

                            <step>
                                <para><emphasis>Truststore Password</emphasis> : The
                                password for the truststore used by the client. By
                                default, the password for the GlassFish truststore
                                is already specified. The password is
                                <code>changeit</code> .</para>

                                <note>
                                    <para>When specified, this password is stored in a
                                    WSIT configuration file in clear text. Setting the
                                    truststore password in the development environment
                                    is fine; however, when you go into production,
                                    remember to use the container's default
                                    <code>CallbackHandler</code> to obtain the keys from
                                    the keystore. This eliminates the need for the
                                    keystore passwords to be supplied by the users. You
                                    can also specify the passwords for keystores and
                                    truststores by specifying a
                                    <code>CallbackHandler</code> class that implements
                                    the
                                    <code>javax.security.auth.callback.CallbackHandler</code>
                                    interface in the Keystore Password, Truststore
                                    Password, or Key Password fields.</para>
                                </note>
                            </step>

                            <step>
                                <para><emphasis>Load Aliases</emphasis> : Click this
                                button to populate the Alias list with all of the
                                certificates available in the selected keystore.
                                This option will only work if the truststore
                                location and password are correct.</para>
                            </step>

                            <step>
                                <para><emphasis>Truststore Alias</emphasis> : Select
                                the alias of the server certificate and private key
                                in the client truststore. Refer to the table in
                                <xref linkend="ahido" xrefstyle="select:title" /> to
                                determine which alias is appropriate for the
                                selected security mechanism.</para>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahidx">
            <title>Configuring Validators</title>

            <para>A validator is an optional set of classes used to check the
            validity of a token, a certificate, a timestamp, or a username and
            password. The Validators button will be enabled when all of the
            following are true:</para>

            <itemizedlist>
                <listitem>
                    <para>Security is enabled for the service.</para>
                </listitem>

                <listitem>
                    <para>Target server for the service is not
                    GlassFish.</para>
                </listitem>

                <listitem>
                    <para>Development defaults are disabled.</para>
                </listitem>

                <listitem>
                    <para>Security profile for the service is not one of the
                    three STS based profiles.</para>
                </listitem>
            </itemizedlist>

            <para>Applications that run under a GlassFish 9.1 or higher
            container do not need to configure Callback Handlers and
            Validators when using the IDE with WSIT enabled. This is because
            the container handles the callbacks and validation. You only need
            to make sure that the certificates are available at locations that
            GlassFish requires and/or create authorized users using the Admin
            Console (described in <xref linkend="ahidj"
            xrefstyle="select:title" /> .</para>

            <para>Validators are always optional because there are defaults in
            the runtime (regardless of the container and regardless of whether
            the application is a JSR-109 or a non-JSR-109 deployment.) For
            non-JSR-109 deployment, you only need to specify a validator when
            you want to override the default validators. For JSR-109
            deployments, there is no point in specifying an overriding
            validator, as these will be overridden back to the defaults by
            GlassFish, thus the Validators button is not available when the
            selected web service is a JSR-109-compliant application.</para>

            <task xml:id="gfrhe">
                <title>To Set Validator Configuration Options</title>

                <tasksummary>
                    <para>To set the validator configuration options for a
                    non-JSR-109-compliant application (such as a Java SE client),
                    perform the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Right-click the web
                        service and select Edit Web Service Attributes.
                        </emphasis></para>

                        <para>The Web Service Attributes editor is
                        displayed.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Enable Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Unselect Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click the Validator
                        button.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> On the Validator
                        Configuration page, specify the following options,
                        when necessary: </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis> Username Validator </emphasis> :
                                Specifies the validator class to be used to validate
                                username and password on the server side. This
                                option is only used by a web service.</para>

                                <note>
                                    <para>When using the default Username Validator,
                                    make sure that the username and password of the
                                    client are registered with GlassFish (using Admin
                                    Console, described in <xref linkend="ahidj"
                                    xrefstyle="select:title" /> ) if using GlassFish, or
                                    is included in the <code>tomcat-users.xml</code>
                                    file if using Tomcat.</para>
                                </note>
                            </step>

                            <step>
                                <para><emphasis>Timestamp Validator</emphasis> :
                                Specifies the validator class to be used to check
                                the token timestamp to determine whether the token
                                has expired or is still valid.</para>
                            </step>

                            <step>
                                <para><emphasis> Certificate Validator </emphasis> :
                                Specifies the validator class to be used to validate
                                the certificate supplied by the client or the web
                                service.</para>
                            </step>

                            <step>
                                <para><emphasis> SAML Validator: </emphasis>
                                Specifies the validator class to be used to validate
                                SAML token supplied by the client or the web
                                service.</para>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>
    </section>

    <section xml:id="ConfiguringKerberos">
        <title>Configuring Kerberos for GlassFish and Tomcat</title>

        <para>This section explains how to setup GlassFish or Tomcat to use
        Kerberos Authentication. It assumes that the underlying infrastructure
        has Kerberos Authentication available. If you need information on how
        to setup Kerberos in Solaris or Ubuntu Linux environments, refer to
        the following links: <itemizedlist>
                <listitem>
                    <para><link
                    xlink:href="http://blogs.sun.com/tdh/entry/installing_a_kerberos_kdc_and">Solaris
                    10: Installing a Kerberos KDC</link></para>
                </listitem>

                <listitem>
                    <para><link
                    xlink:href="http://www.alittletooquiet.net/text/kerberos-on-ubuntu/">Ubuntu
                    Linux: Kerberos On Ubuntu</link></para>
                </listitem>
            </itemizedlist></para>

        <para>Note that in a Windows environment you can set up a Kerberos KDC
        only on Window Server editions 2000, 2022 and 2008. The KDC is bundled
        in these editions with its own Kerberos implementation as part of
        Active Directory. You can not install MIT Kerberos KDC on Windows. A
        Windows XP/Vista system can act as a client of the Windows Server
        editions KDC. Alternatively, you can install a client module of MIT
        Kerberos for Windows -- see <link
        xlink:href="http://web.mit.edu/Kerberos/kfw-3.2/kfw-3.2.2.html">Kerberos
        for Windows Release 3.2.2</link>.You can then use the client module to
        authenticate against a KDC that was set up on a UNIX system.</para>

        <section xml:id="KerberosForGlassFish">
            <title>For GlassFish</title>

            <para>Specify the JAAS login modules to be used for Kerberos in
            the $GLASSFISH_HOME/domains/domain1/config/login.conf file, as
            follows: <programlisting>KerberosClient {
    com.sun.security.auth.module.Krb5LoginModule required
    useTicketCache=true;
}

KerberosServer {
    com.sun.security.auth.module.Krb5LoginModule required
    useKeyTab=true keyTab="/etc/krb5.keytab"
    doNotPrompt=true storeKey=true
    principal="websvc/service@INDIA.SUN.LOCAL";
}</programlisting></para>

            <para>You can give any names to the login modules, that is,
            instead of KerberosClient and KerberosServer. You need to refer to
            these names in the &lt;sc:KerberosConfig&gt; assertion in the WSDL
            file and in the wsit-client.xml file.</para>

            <para>Also edit the principal in
            <emphasis>KerberosServer</emphasis> to the
            <emphasis>service_principal</emphasis> that you created, and
            specify the correct location of <emphasis>krb5.keytab</emphasis>
            file.</para>
        </section>

        <section xml:id="KerberosForTomcat">
            <title>For Tomcat</title>

            <para>GlassFish picks the login modules from
            $GLASSFISH_HOME/domains/domain1/config/login.conf. In Tomcat we
            need to specify the file explicitly using
            java.security.auth.login.config system property. Here are the
            steps:</para>

            <itemizedlist>
                <listitem>
                    <para>Create a file jaas.conf , and place it in
                    $CATALINA_HOME/conf. Here's what jaas.conf looks like:
                    <programlisting>KerberosClient {
    com.sun.security.auth.module.Krb5LoginModule required
    useTicketCache=true;
};
KerberosServer {
    com.sun.security.auth.module.Krb5LoginModule required
    useKeyTab=true keyTab="/etc/krb5.keytab"
    doNotPrompt=true storeKey=true
    principal="websvc/service@INDIA.SUN.COM";
};</programlisting></para>
                </listitem>

                <listitem>
                    <para>Add following line to the catalina.sh script (or
                    specify the mentioned JAVA_OPTS property):
                    <programlisting>JAVA_OPTS="$JAVA_OPTS "-Djava.security.auth.login.config=$CATALINA_HOME/conf/jaas.conf</programlisting></para>
                </listitem>

                <listitem>
                    <para>Specify the following system property in your client
                    code: <programlisting>-Djava.security.policy=${tomcat.home}/conf/catalina.policy
-Djava.security.auth.login.config=${tomcat.home}/conf/jaas.conf</programlisting></para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section xml:id="ahidy">
        <title>Securing Operations and Messages</title>

        <para>This section explains how to specify security mechanisms at the
        operation level and at the message level.</para>

        <para>You can specify security mechanisms at the following
        levels:</para>

        <itemizedlist>
            <listitem>
                <para><emphasis>Operation</emphasis></para>

                <para>At times, you may need to configure different operations
                with different supporting tokens. You may wish to configure
                security at the operation level, for example, in the situation
                where only one operation requires a UsernameToken to be passed
                and the rest of the operations do not require this, or in the
                situation where only one operation needs to be endorsed by a
                special token and the others do not.</para>
            </listitem>

            <listitem>
                <para><emphasis> Input Message and Output Message
                </emphasis></para>

                <para>Security mechanisms at this level are used to specify
                what is being protected and the level of protection
                required.</para>

                <para>In this section, you can specify parts of a message that
                require integrity protection (digital signature) and/or
                confidentiality (encryption). When you do this, the specified
                part of the message, outside of security headers, requires
                signature and/or encryption. For example, a message producer
                might submit an order that contains an <code>orderID</code>
                header. The producer signs and/or encrypts the
                <code>orderID</code> header (the SOAP message header) and the
                body of the request (the SOAP message body). Parts that can be
                signed and/or encrypted include the body, the header, the
                local name of the SOAP header, and the namespace of the SOAP
                header.</para>

                <para>You can also specify arbitrary elements in the message
                that require integrity protection and/or confidentiality.
                Because of the mutability of some SOAP headers, a message
                producer may decide not to sign and/or encrypt the SOAP
                message header or body as a whole, but instead sign and/or
                encrypt elements within the header and body. Elements that can
                be signed and/or encrypted include an XPath expression or a
                URI which indicates the version of XPath to use.</para>
            </listitem>
        </itemizedlist>

        <para>This section covers the following topics:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="gfrhv" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiea" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <task xml:id="gfrhv">
            <title>To Specify Security at the Operation, Input Message, or
            Output Message Level</title>

            <tasksummary>
                <para>To specify security mechanisms at the level of the
                operation, input message, or output message, perform the
                following steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold">Right-click the web service
                    and select Web Service Attributes.</emphasis></para>

                    <para>The Web Service Attributes editor is
                    displayed.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Secure
                    Service.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select a security
                    mechanism.</emphasis></para>

                    <para>The following mechanisms do not support Input
                    message level protection:</para>

                    <stepalternatives>
                        <step>
                            <para><xref linkend="ahicv"
                            xrefstyle="select:title" /></para>
                        </step>

                        <step>
                            <para><xref linkend="ahicv1"
                            xrefstyle="select:title" /></para>
                        </step>

                        <step>
                            <para><xref linkend="ahicx"
                            xrefstyle="select:title" /></para>
                        </step>

                        <step>
                            <para><xref linkend="ahicz"
                            xrefstyle="select:title" /></para>
                        </step>

                        <step>
                            <para><xref linkend="ahida"
                            xrefstyle="select:title" /></para>
                        </step>

                        <step>
                            <para><xref linkend="ahidc"
                            xrefstyle="select:title" /></para>
                        </step>
                    </stepalternatives>
                </step>

                <step>
                    <para><emphasis role="bold"> Expand the
                    <emphasis>operation</emphasis> Operation node (for
                    example, the <code>add Operation</code> node.) It should
                    look like <xref linkend="gfrgy"
                    xrefstyle="select:title" />. </emphasis> <figure
                            xml:id="gfrgy">
                            <title>Web Service Attributes Editor Page: Operation
                            Level</title>

                            <mediaobject>
                                <imageobject>
                                    <imagedata contentdepth="100%"
                                               fileref="figures/security-operation-level.png"
                                               scalefit="1" width="100%"/>
                                </imageobject>

                                <textobject>
                                    <simpara>Screen shot of web service attributes
                                    editor page (operation level)</simpara>
                                </textobject>
                            </mediaobject>
                        </figure></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Expand the
                    <emphasis>operation</emphasis> section. </emphasis></para>

                    <para>The section will be grayed out if Secure Service is
                    not selected.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select an option from the
                    Transactions list to specify a level at which transactions
                    will be secured. </emphasis></para>

                    <para>For this release, transactions will only use SSL for
                    security. Transactions are discussed in <xref
                    linkend="using_at" xrefstyle="select:title" />.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Expand the Input Message
                    section.</emphasis></para>

                    <para>This section will be grayed out if Secure Service is
                    not selected.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Specify the following options,
                    as appropriate:</emphasis></para>

                    <stepalternatives>
                        <step>
                            <para><emphasis>Authentication Token</emphasis> :
                            Specifies which supporting token will be used to
                            sign and/or encrypt the specified message parts.
                            Options include Username, X509, SAML, Issued, or
                            None. For further description of these options, read
                            <xref linkend="ahiea"
                            xrefstyle="select:title" />.</para>
                        </step>

                        <step>
                            <para><emphasis>Signed</emphasis> : Specifies that
                            the authentication token must be a signed,
                            supporting token. A signed, supporting token is
                            signed by the primary signature token and is part of
                            primary signature.</para>
                        </step>

                        <step>
                            <para><emphasis>Endorsing</emphasis> : Specifies
                            that the authentication token must be endorsed. With
                            an endorsing supporting token, the key represented
                            by the token is used to endorse/sign the primary
                            message signature.</para>
                        </step>

                        <step>
                            <para><emphasis>Encrypted</emphasis>: Specifies that
                            the authentication token must be an encrypted
                            supporting token.</para>
                        </step>
                    </stepalternatives>

                    <para>One can select any (or none) combination of the
                    three options above. If both Signed and Endorsing are
                    selected, the authentication token must be a signed,
                    endorsing, supporting token. In this situation, the token
                    is signed by the primary signature. The key represented by
                    the token is used to endorse/sign the primary message
                    signature. If Encrypted is selected as well, the
                    supporting token is also encrypted in the request
                    message.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> For the Input Message and/or
                    Output Message, click the Message Parts button to specify
                    which parts of the message need to be encrypted, signed,
                    and/or required. </emphasis></para>

                    <para>See the following section for more information on
                    the options in the Message Parts dialog.</para>

                    <para>The Message Parts dialog appears. It should look
                    like <xref linkend="gfrhz"
                    xrefstyle="select:title" />.</para>

                    <figure xml:id="gfrhz">
                        <title>Web Service Attributes Editor Page: Message
                        Parts</title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="100%"
                                           fileref="figures/security-message-parts.png"
                                           scalefit="1" width="100%"/>
                            </imageobject>

                            <textobject>
                                <simpara>Screen shot of web service attributes
                                editor page (message parts)</simpara>
                            </textobject>
                        </mediaobject>
                    </figure>
                </step>

                <step>
                    <para><emphasis role="bold"> Click in a checkbox to the
                    right of the message part or element that you would like
                    to sign, encrypt or require. </emphasis></para>

                    <stepalternatives>
                        <step>
                            <para>Select Sign to specify the parts or elements
                            of a message that require integrity protection
                            (digital signature).</para>
                        </step>

                        <step>
                            <para>Select Encrypt to specify the parts or
                            elements of a message that require confidentiality
                            (encryption).</para>
                        </step>

                        <step>
                            <para>Select Require to specify the set of parts
                            and/or elements that a message must contain.</para>
                        </step>
                    </stepalternatives>
                </step>

                <step>
                    <para><emphasis role="bold">Click Add Body to add a row
                    for the message body.</emphasis></para>

                    <para>This will only be necessary if the row has been
                    removed.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Click Add Header to add a row
                    for either a specific SOAP header part or for all SOAP
                    header parts. </emphasis></para>

                    <para>This will only be necessary if the SOAP header row
                    in question has been deleted. The header parts that are
                    available to sign and/or encrypt before clicking the Add
                    Header button include To (Addressing), From (Addressing),
                    FaultTo (Addressing), ReplyTo (Addressing), MessageID
                    (Addressing), RelatesTo (Addressing), and Action
                    (Addressing). After clicking Add Header, and then clicking
                    All Headers, you may also specify AckRequested (RM),
                    SequenceAcknowledgement (RM), and Sequence (RM).</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Click Add Attachments to add
                    a row the SOAP attachments. </emphasis></para>

                    <para>This is useful if the web service has MIME
                    attachments which should be protected. All the attachments
                    in the message are secured on selecting this option. This
                    option is only available for the specification version of
                    Security Policy, supported in Netbeans IDE from 6.5
                    version.</para>

                    <note>
                        <para>Attachments Protection is not supported in .NET
                        3.0 and 3.5. So it is best to avoid this feature for
                        interop with .NET.</para>
                    </note>
                </step>

                <step>
                    <para><emphasis role="bold"> There are no XPath elements
                    displayed by default. Click Add XPath to add rows that
                    enable you to specify signature and/or encryption for an
                    XPath expression or a URI which indicates the version of
                    XPath to use. </emphasis></para>

                    <para>By default, the Required field is selected. This is
                    an editable field. Double-click the XPath row to specify
                    the XPath expression or URI. Only one XPath element is
                    allowed.</para>

                    <note>
                        <para>There is a limitation when specifying XPath
                        elements. To use XPath elements, switch off Optimize
                        Security manually by adding the
                        <code>disableStreamingSecurity</code> policy
                        assertion. For information on how to do this, refer to
                        <link
                        xlink:href="https://blogs.oracle.com/ashutosh/entry/custom_security_policy_assertions_in">http://blogs.sun.com/venu/</link>
                        for more information on
                        <code>disableStreamingSecurity</code>.</para>
                    </note>
                </step>

                <step>
                    <para><emphasis role="bold"> To remove an element, select
                    it in the Message Part section, and then click Remove to
                    remove it from message security. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to save these
                    settings.</emphasis></para>
                </step>
            </procedure>
        </task>

        <section xml:id="ahiea">
            <title>Supporting Token Options</title>

            <para>You can use one of the following options for supporting
            tokens:</para>

            <itemizedlist>
                <listitem>
                    <para><emphasis>Username Token</emphasis>: A username
                    token is used to identify the requestor by their username,
                    and optionally using a password (or shared secret, or
                    password equivalent) to authenticate that identity. When
                    using a username token, the user must be configured on
                    GlassFish. For information on configuring users on
                    GlassFish, read <xref linkend="ahidj"
                    xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>X.509 Certificate</emphasis>: An X.509
                    certificate specifies a binding between a public key and a
                    set of attributes that includes (at least) a subject name,
                    issuer name, serial number, and validity interval. An
                    X.509 certificate may be used to validate a public key
                    that may be used to authenticate a SOAP message or to
                    identify the public key with a SOAP message that has been
                    encrypted. When this option is selected, you must specify
                    a truststore. For information on specifying a truststore,
                    read <xref linkend="gfrgu"
                    xrefstyle="select:title" />.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Issued Token</emphasis> : An issued token
                    is a token issued by a trusted Secure Token Service (STS).
                    The service does not trust the client directly, but
                    instead trusts tokens issued by a designated STS. In other
                    words, the STS is taking on the role of a second service
                    with which the client has to securely authenticate. The
                    issued tokens contain a key, which is encrypted for the
                    server and which is used for deriving new keys for signing
                    and encrypting.</para>
                </listitem>

                <listitem>
                    <para><emphasis>SAML Token</emphasis> : A SAML Token uses
                    Security Assertion Markup Language (SAML) assertions as
                    security tokens.</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section xml:id="ahieb">
        <title>Configuring A Secure Token Service (STS)</title>

        <para>A Secure Token Service (STS) is a Web service that issues
        security tokens. That is, it makes assertions based on evidence that
        it trusts, to whoever trusts it (or to specific recipients). To
        communicate trust, a service requires proof, such as a signature, to
        prove knowledge of a security token or set of security tokens. A
        service itself can generate tokens or it can rely on a separate STS to
        issue a security token with its own trust statement (note that for
        some security token formats this can just be a re-issuance or
        co-signature). This forms the basis of trust brokering.</para>

        <para>The issued token security model includes a target service, a
        client, and a trusted third party called a Security Token Service
        (STS). Policy flows from service to client, and from STS to client.
        Policy may be embedded inside an issued token assertion, or acquired
        out-of-hand. There must be an explicit trust relationship between the
        service and the STS and the client and the STS. There does not need to
        be a trust relationship between the client and service.</para>

        <para>When the web service being referenced by the client uses any of
        the STS security mechanisms (refer to tables in <xref linkend="ahicn"
        xrefstyle="select:title" /> and <xref linkend="ahicp"
        xrefstyle="select:title" /> ), an STS must be specified. You can
        specify the STS in the following ways.</para>

        <itemizedlist>
            <listitem>
                <para>On the service side, specify the endpoint of the Issuer
                element and/or specify the Issuer Metadata Exchange (Mex)
                address of the STS.</para>

                <para>If you need to create a third-party STS, follow the
                steps in <xref linkend="gfrig" xrefstyle="select:title" />
                .</para>

                <para>For more information on managing the STS, see <xref
                linkend="sts-managing-multiple-services"
                xrefstyle="select:title" /> .</para>

                <para>If you already have an STS that you want to use, follow
                the steps in <xref linkend="gfrgl" xrefstyle="select:title" />
                .</para>

                <para>An example that creates and uses an STS can be found at
                <xref linkend="ahiey" xrefstyle="select:title" /> .</para>

                <para>An example that shows how to achieve the trust brokering
                between different domains using an STS can be found at <xref
                linkend="ahiex" xrefstyle="select:title" /> .</para>

                <para>An example that shows how to use SecureConversation with
                an STS can be found at <xref linkend="ahiez"
                xrefstyle="select:title" /> .</para>
            </listitem>

            <listitem>
                <para>On the client side, specify the information for a
                preconfigured STS. This is mainly used for a local STS that is
                in the same domain as the client. Configuring the STS for the
                client is described in <xref linkend="gghnt"
                xrefstyle="select:title" /> .</para>
            </listitem>
        </itemizedlist>

        <para>This section covers the following topics:</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="gfrig" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="gfrgl" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="gghnt" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <task xml:id="gfrig">
            <title>To Create a Third-Party STS</title>

            <tasksummary>
                <para>Use the STS wizard to create an STS. When using the STS
                wizard, provide the name of the STS implementation class. This
                class must extend
                <code>com.sun.xml.ws.security.trust.sts.BaseSTSImpl</code> .
                After completing the steps of the wizard, your application
                will contain a new service that is an STS and includes a
                provider implementation class, STS WSDL, and a WSIT
                configuration file with a predefined set of policies.</para>

                <para>To use the STS wizard to create an STS, follow these
                steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold"> Create a new project for the
                    STS by selecting File | New Project. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Java Web, then Web
                    Application, then Next.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Type a Project Name, then
                    Next, then the desired Server. Click
                    Finish.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the STS Project,
                    and select New, then select Other. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Web Services from the
                    Categories list.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select Secure Token Service
                    (STS) from the File Type(s) list. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click Next.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Type a name for the Web
                    Service Class Name.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Type or select a name for the
                    Package list.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click
                    Finish.</emphasis></para>

                    <para>The IDE takes a while to create the STS. When
                    created, it appears under the project's Web Services node
                    as <emphasis>your_STS</emphasis> <code>Service</code> ,
                    and the Java file appears in the right pane.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> The STS wizard creates an
                    implementation of the provider class. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Back in the Projects window,
                    expand the STS project folder, expand the Web Services
                    node, right-click on the web service, and select Edit Web
                    Service Attributes to configure the STS.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select the "Version
                    Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see <xref
                    linkend="gfrct" xrefstyle="select:title" /> ) . It will
                    use WS-SX version of all WS-* specifications.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Make sure Secure Service is
                    selected.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select a Security Mechanism
                    that is NOT one of the STS mechanisms. The example
                    application uses Username Authentication with Symmetric
                    Key. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select the Configure button.
                    For the Algorithm Suite option, specify a value that
                    matches the value of the web service. Set the Key Size to
                    128 if you have not configured Unlimited Strength
                    Encryption. Select OK to close the configuration dialog.
                    </emphasis> <note>
                            <para>Some of the algorithm suite settings require
                            that Unlimited Strength Encryption be configured in
                            the Java Runtime Environment (JRE), particularly the
                            algorithm suites that use 256 bit encryption.
                            Download the Java Cryptography Extension (JCE)
                            Unlimited Strength Jurisdiction Policy Files.
                            Installation instructions are provided in the JCE
                            zip file. You can download JCE from this URL: <link
                            xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</link></para>
                        </note></para>
                </step>

                <step>
                    <para>
                        <emphasis role="bold">Make sure Act as Secure Token
                        Service (STS) is selected.</emphasis>
                    </para>

                    <para>The default values will create a valid STS.</para>

                    <para>Optionally, you can change the following
                    configuration options by clicking the Configure
                    button:</para>

                    <stepalternatives>
                        <step>
                            <para><emphasis>Issuer</emphasis> : Specify an
                            identifier for the issuer for the issued token. This
                            value can be any string that uniquely identifies the
                            STS, for example, <code>MySTS</code> .</para>
                        </step>

                        <step>
                            <para><emphasis>Contract Implementation
                            Class</emphasis> : Specify the actual implementation
                            class for the <code>WSTrustContract</code> interface
                            that will handle token issuance, validation, and the
                            like. Default value is
                            <code>com.sun.xml.ws.security.trust.impl.WSTRustContractImpl</code>
                            for issuing SAML assertions, or click Browse to
                            browse to another contract implementation
                            class.</para>
                        </step>

                        <step>
                            <para><emphasis>Life Time of Issued
                            Tokens</emphasis> : The life span of the token
                            issued by the STS. Default value is 36,000
                            ms.</para>
                        </step>

                        <step>
                            <para><emphasis>Encrypt Issued Key</emphasis> :
                            Select this option if the issued key should be
                            encrypted using the service certificate. Default is
                            true.</para>
                        </step>

                        <step>
                            <para><emphasis>Encrypt Issued Token</emphasis> :
                            Select this option if the issued token should be
                            encrypted using the service certificate. Default is
                            false.</para>
                        </step>
                    </stepalternatives>

                    <para>Optionally, to add one or more Service Providers
                    that have a trust relationship with the STS, click the Add
                    button, and specify the following configuration
                    options:</para>

                    <stepalternatives>
                        <step>
                            <para><emphasis>Provider Endpoint URI</emphasis> :
                            The endpoint URI of the service provider.</para>
                        </step>

                        <step>
                            <para><emphasis>Certificate Alias</emphasis> : The
                            alias of the certificate of the service provider in
                            the keystore.</para>
                        </step>

                        <step>
                            <para><emphasis>Token Type</emphasis> : The type of
                            token the service provider requires, for example,
                            <code>urn:oasis:names:tc:SAML1.0:assertion</code>
                            .</para>
                        </step>

                        <step>
                            <para><emphasis>Key Type</emphasis> : The type of
                            key the service provider requires. The choices are
                            public key or symmetric key. Symmetric key
                            cryptography relies on a shared secret and is
                            usually faster than public key cryptography. Public
                            key cryptography relies on a key that is made public
                            to all and is primarily used for encryption but can
                            be used for verifying signatures.</para>
                        </step>
                    </stepalternatives>
                </step>

                <step>
                    <para><emphasis role="bold"> Click OK to close the Select
                    STS Service Provider dialog, if open. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to close the STS
                    Configuration dialog, if open.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click the Keystore button to
                    configure the keystore.</emphasis></para>

                    <para>If you are using the GlassFish stores, click the
                    Load Aliases button and select <code>wssip</code> .
                    Otherwise, browse to the location of your keystore and
                    enter the relevant information.</para>

                    <para>Click OK to close the dialog.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the STS Project
                    and select Properties. Select the Run category, and type
                    the following in the Relative URL field: <code>/</code>
                    <emphasis>your_STS</emphasis> <code>Service?wsdl</code> .
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Run the Project (right-click
                    the Project and select Run). The STS WSDL displays in a
                    browser window. </emphasis></para>
                </step>
            </procedure>
        </task>

        <para>Check <xref linkend="custom-sts" xrefstyle="select:title" /> to
        build a custom STS to control the user attributes to be included in
        the SAML assertion.</para>

        <task xml:id="sts-managing-multiple-services">
            <title>Managing multiple services with Metro based STS</title>

            <tasksummary>
                <para>Metro based STS can be used to secure multiple services.
                One need to register a service provider to an STS before the
                issued tokens of the STS can be used for that service.</para>

                <para>Each resgisted service comes up as a ServiceProvide in
                the STSConfiguration: <example>
                        <programlisting language="xml"
                                        linenumbering="unnumbered">&lt;tc:STSConfiguration
        xmlns:tc="http://schemas.sun.com/ws/2006/05/trust/server"
        encryptIssuedKey="true" encryptIssuedToken="false"&gt;
   &lt;tc:LifeTime&gt;36000&lt;/tc:LifeTime&gt;
   &lt;tc:Contract&gt;com.sun.xml.ws.security.trust.impl.WSTrustContractImpl
   &lt;/tc:Contract&gt;
   &lt;tc:Issuer&gt;SunSTS&lt;/tc:Issuer&gt;
   &lt;tc:ServiceProviders&gt;
      &lt;tc:ServiceProvider endPoint="http://localhost:8080/jaxws-s5/simple"&gt;
         &lt;tc:CertAlias&gt;bob&lt;/tc:CertAlias&gt;
         &lt;tc:TokenType&gt;
            http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1
            #SAMLV1.1
         &lt;/tc:TokenType&gt;
      &lt;/tc:ServiceProvider&gt;
      &lt;!-- more service providers --&gt;
   &lt;/tc:ServiceProviders&gt;
&lt;/tc:STSConfiguration&gt;</programlisting>
                    </example></para>

                <para>At the minimum, you need to specify the endpoint as well
                as the cert alias for each service provider. At run time, the
                actual service is identified for each request RST from a
                client to the STS. The RST contains an AppliesTo element
                pointing to the endpoint of the targeted service. On the STS
                side, the certificate of the service is used to encrypt the
                issued tokens and proof keys for the service.</para>

                <para>With Netbeans, one can add Service Providers to an STS
                through the configuration panel for STS:</para>
            </tasksummary>

            <procedure>
                <step>
                    <para>Click Configure button besides Act as Secure Token
                    Service (STS).</para>
                </step>

                <step>
                    <para>In the STS Configuration panel, click Add</para>
                </step>

                <step>
                    <para>In the Select Service Provider panel, add
                    information of the service provider. Note that you must
                    import the certificate of the service provider to the
                    TrustStore of the STS.</para>
                </step>
            </procedure>
        </task>

        <para>We provide a default Service Provider with endpoint="default".
        This default setting, working with any service providers, is for
        testing purpose only. In a product, you must remove it and add all the
        service providers to be secured by the STS. You may also implement
        STSConfigurationProvider with your own STSConfiguration and
        TrustSPMetada to configure STS and register service providers to a
        deployed STS at run time.</para>

        <task xml:id="gfrgl">
            <title>To Specify an STS on the Service Side</title>

            <tasksummary>
                <para>This section discusses how to specify a Security Token
                Service that can be referenced by the service. On the service
                side, you select a security mechanism that includes STS in its
                title.</para>

                <para>The STS itself is secured using a separate (non-STS)
                security mechanism. The security configuration of the
                client-side of this application is dependent upon the security
                mechanism selected for the STS, and not on the security
                mechanism selected for the application.</para>

                <para>To specify an STS for the web service, follow these
                steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold">Right-click the node for the
                    web service you want to secure.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Edit Web Service
                    Attributes.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select the "Version
                    Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see <xref
                    linkend="gfrct" xrefstyle="select:title" /> ) . It will
                    use WS-SX version of all WS-* specifications.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Secure
                    Service.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Select a Security Mechanism
                    that specifies STS from the list. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click Configure to specify the
                    STS information.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Type the Issuer Address and/or
                    Issuer Metadata Address.</emphasis></para>

                    <para>When the Issuer Address and the Metadata values are
                    the same, you only need to type the Issuer Address. For
                    the example application, the Issuer Address would be
                    <code>http://localhost:8080/MySTSProject/MySTSService</code>
                    .</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Set the Algorithm Suite value
                    so that the algorithm suite value of the service matches
                    the algorithm suite value of the STS. Select 128 if you
                    have not installed Unlimited Strength Encryption.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to close the
                    dialog.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK.</emphasis></para>

                    <para>A new file is added to the project. To view the WSIT
                    configuration file, expand Web Pages | WEB-INF, then
                    double-click the file <code> wsit- package-name .
                    service-name .xml </code> and select the Source
                    page.</para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the project node
                    and select Run to compile the application and deploy it
                    onto GlassFish. A browser will open and display the WSDL
                    file for the application. </emphasis></para>
                </step>
            </procedure>
        </task>

        <task xml:id="gghnt">
            <title>To Specify an STS on the Client Side</title>

            <tasksummary>
                <para>Once you've determined whether it is required to
                configure an STS on the client side (see <xref linkend="ahicp"
                xrefstyle="select:title" />), configure the client Secure
                Token Service options. To configure the client-side with STS,
                you need to configure the clients for the service and STS
                follow these steps.</para>
            </tasksummary>

            <procedure>
                <step>
                    <para><emphasis role="bold"> In the Projects window,
                    expand the node for the web services client.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Expand the Web Service
                    References node.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the node for the
                    web service reference for which you want to configure
                    security options. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select Edit Web Service
                    Attributes.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> When the Web Service
                    References Attributes Editor is opened, select the Quality
                    of Service tab. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Provide the service's
                    certificate by pointing to an alias in the client
                    truststore. For development purposes, click the Truststore
                    button,, click the Load Aliases button for the truststore
                    and select <code>xws-security-server</code> from the Alias
                    list. </emphasis></para>

                    <stepalternatives>
                        <step>
                            <para><emphasis role="bold"> In some instances,
                            NetBeans will not detect that this client is a
                            JSR-196 client, and thus will require that the
                            truststore entries be manually configured. To do
                            this, follow the steps in this section.
                            </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Expand the client
                            project node, then expand Source
                            Packages/META-INF.</emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Double-click
                            <emphasis>&lt;service-project&gt;</emphasis> ..xml
                            to open it in the Source window. Click the Source
                            tab to view the code. Find the
                            <code>sc:TrustStore</code> elements. If these
                            elements contain parameters for
                            <code>location</code> and <code>storepass</code> ,
                            then just continue to the next section. If not, add
                            these attributes to this file. The following code
                            shows an example of how these elements could be
                            specified. </emphasis></para>

                            <example>
                                <programlisting language="xml"
                                                linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="xws-security-server"/&gt;</programlisting>
                            </example>
                        </step>
                    </stepalternatives>
                </step>

                <step>
                    <para><emphasis role="bold"> Expand the Security Token
                    Service node to provide details for the STS to be used.
                    When the Endpoint and the Metadata values are the same,
                    you only need to enter the Endpoint value. For the example
                    application you would enter the following value in the
                    Endpoint field:
                    <code>http://localhost:8080/MySTSProject/MySTSService</code>
                    . For WS Trust Version field, select 1.3 if STS endpoint
                    uses ".NET 3.5 / Metro 1.3" version compatibility.
                    Otherwise use the default WS Trust Version.
                    </emphasis></para>

                    <para>The Endpoint field is a mandatory field. Depending
                    on how you plan to configure the STS, you can provide
                    either Metadata information or information regarding the
                    WSDL Location, Service Name, Port Name and Namespace. The
                    examples following this section describe a few potential
                    STS configurations.</para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to close this
                    dialog.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> The service requires a token
                    to be issued from the STS, which, for the example, is
                    <code>http://localhost:8080/MySTSProject/MySTSService</code>
                    , with WSDL file
                    <code>http://localhost:8080/MySTSProject/MySTSService?wsdl</code>
                    . To do this, follow these steps: </emphasis></para>

                    <substeps>
                        <step>
                            <para><emphasis role="bold"> Right-click the web
                            service client project node and select New | Web
                            Service Client. </emphasis></para>

                            <para>The New Web Service Client window
                            appears.</para>
                        </step>

                        <step>
                            <para><emphasis role="bold">Select the WSDL URL
                            option.</emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Cut and paste the URL
                            of the web service that you want the client to
                            consume into the WSDL URL field. For the tutorial
                            example, the URL for the <code>MySTS</code> web
                            servicen is: </emphasis></para>

                            <programlisting>http://localhost:8080/MySTSProject/MySTSService?wsdl</programlisting>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Type the package name,
                            for example,
                            <code>org.me.calculator.client.sts</code> , into the
                            Package field, then click Finish. </emphasis></para>

                            <para>The Projects window displays the new web
                            service client.</para>
                        </step>
                    </substeps>
                </step>

                <step>
                    <para><emphasis role="bold"> Drill down from the web
                    service client project node to the Web Service References
                    node. </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Right-click the node for the
                    STS service, and select Edit Web Service Attributes.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold">Select the Quality of Service
                    tab.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> If required, provide the
                    client's private key by pointing to an alias in the
                    keystore. For development purposes, click the Keystore
                    button, click the Load Aliases button, and select
                    <code>xws-security-client</code> from the Alias list.
                    </emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Verify the STS's certificate
                    by pointing to an alias in the client truststore. For
                    development purposes, click the Truststore button,, click
                    the Load Aliases button and select <code>wssip</code> from
                    the Alias list. </emphasis></para>

                    <stepalternatives>
                        <step>
                            <para><emphasis role="bold"> In some instances,
                            NetBeans will not detect that this client is a
                            JSR-196 client, and thus will require that the
                            keystore and truststore entries be manually
                            configured. To do this, follow the steps in this
                            section. </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Expand the web services
                            client project node, then Source Packages |
                            META-INF. </emphasis></para>
                        </step>

                        <step>
                            <para><emphasis role="bold"> Double-click
                            <emphasis>&lt;sts-service&gt;</emphasis> .xml to
                            open it in the Source window. Click the Source tab
                            to view the code. Find the <code>sc:KeyStore</code>
                            and/or <code>sc:TrustStore</code> elements. If these
                            elements contain parameters for
                            <code>location</code> and <code>storepass</code> ,
                            then just continue to the next section. If not, add
                            these attributes to this file. The following code
                            shows an example of how these elements could be
                            specified. </emphasis></para>

                            <example>
                                <programlisting language="xml"
                                                linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="wssip"/&gt;
&lt;sc:KeyStore
 wspp:visibility="private"
 location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\truststore.jks"
 storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                            </example>
                        </step>
                    </stepalternatives>
                </step>

                <step>
                    <para><emphasis role="bold">If required, enter the default
                    user name and password.</emphasis></para>

                    <para>If you followed the steps in <xref linkend="ahidj"
                    xrefstyle="select:title" /> , this will be User Name
                    <code>wsitUser</code> and Password <code>changeit</code>
                    .</para>
                </step>

                <step>
                    <para><emphasis role="bold">Click OK to close this
                    dialog.</emphasis></para>
                </step>

                <step>
                    <para><emphasis role="bold"> Compile and run this
                    application by right-clicking the web services client
                    project and selecting Run. </emphasis></para>
                </step>
            </procedure>
        </task>
    </section>

    <section xml:id="ahiei">
        <title>Example Applications</title>

        <para>The following example applications demonstrate configuring web
        services and web service clients for different security mechanisms. If
        you are going to work through the examples sequentially, you must
        manually undo the changes to the service and then refresh the client
        in order for the client to receive the most recent version of the
        service's WSDL file, which contains the latest security configuration
        information.</para>

        <itemizedlist>
            <listitem>
                <para><xref linkend="ahiej" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="UsernameWithDigestPasswords"
                xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiem" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiep" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahies" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiev" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiey" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiex" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="ahiez" xrefstyle="select:title" /></para>
            </listitem>

            <listitem>
                <para><xref linkend="gfzhh" xrefstyle="select:title" /></para>
            </listitem>
        </itemizedlist>

        <section xml:id="ahiej">
            <title>Example: Username Authentication with Symmetric Key
            (UA)</title>

            <para>The section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrhw"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrkr"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrhw">
                <title>To Secure the Example Service Application (UA)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahicv" xrefstyle="select:title" /> is used to
                    secure the application. To add security to the service
                    part of the example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> . </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service (CalculatorWS) and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect Reliable
                        Messaging if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the
                        CalculatorWSPortBinding section, select Secure
                        Service. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select Username Authentication
                        with Symmetric Key. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Use Development
                        Defaults to set up the keystore and truststore files,
                        and to create a user for this application, if needed.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click OK to close the
                        <code>CalculatorWSService</code> dialog.
                        </emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code> .
                        This file contains the security elements within
                        <code>wsp:Policy</code> tags.</para>

                        <para>An example of this file can be viewed in the
                        tutorial by clicking this link: <xref linkend="ahifh"
                        xrefstyle="select:title" /> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. A browser
                        will open and display the WSDL file for the
                        application. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfrkr" xrefstyle="select:title" /> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrkr">
                <title>To Secure the Example Web Service Client Application
                (UA)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. This web service is secured using
                    the security mechanism described in <xref linkend="ahicv"
                    xrefstyle="select:title" /> . When this security mechanism
                    is used with a web service, the web service client must
                    provide a username and password in addition to specifying
                    the certificate of the server.</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application by following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> . </emphasis> <note>
                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand the node for the
                        web service client application,
                        CalculatorWSServletClient. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Web Service
                        References node.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click on
                        CalculatorWSService, select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Security section
                        of the Quality of Service tab, select Use Development
                        Defaults. Click OK to close. </emphasis> <note>
                                <para>By default, the user name of
                                <emphasis>wsitUser</emphasis> and the password of
                                <emphasis>changeit</emphasis> will be entered in
                                this section. If the example doesn't run, make sure
                                that you have a user with this name and password set
                                up in the file realm of the Application Server or
                                GlassFish, as described in <xref linkend="ahidj"
                                xrefstyle="select:title" /> .</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> If you'd like to, in the
                        tree, drill down from the project to Source Packages |
                        META-INF. Double-click on
                        <code>CalculatorWSService.xml</code> , and verify that
                        lines similar to the following are present:
                        </emphasis></para>

                        <example>
                            <programlisting language="xml"
                                            linenumbering="unnumbered">&lt;wsp:All&gt;
   &lt;sc:TrustStore
         wspp:visibility="private"
         location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
         storepass="changeit" peeralias="xws-security-server"/&gt;
   &lt;sc:CallbackHandlerConfiguration wspp:visibility="private"&gt;
      &lt;sc:CallbackHandler default="wsitUser" name="usernameHandler"/&gt;
      &lt;sc:CallbackHandler default="changeit" name="passwordHandler"/&gt;
   &lt;/sc:CallbackHandlerConfiguration&gt;
&lt;/wsp:All&gt;</programlisting>
                        </example>

                        <para>By selecting Use Development Defaults when
                        securing the service, these values are automatically
                        generated for you.</para>

                        <para>An example of this file can be viewed in the
                        tutorial by clicking this link: <xref linkend="ahifi"
                        xrefstyle="select:title" /> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorWSServletClient node and select Run. The
                        result of the add operation will display in a browser
                        window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="UsernameWithDigestPasswords">
            <title>Example: Username with Digest Passwords</title>

            <para>This example is similar to <xref linkend="ahiej"
            xrefstyle="select:title" /> except that digest passwords (along
            with Created and Nonce) are used in
            <emphasis>UsernameToken</emphasis>, and
            <emphasis>UsernameToken</emphasis> is not encrypted in the
            message.</para>

            <para>To Secure the Service Application, all the steps remain
            same, except for step 6. For step 6, do the following:</para>

            <orderedlist>
                <listitem>
                    <para><emphasis role="bold"> Click on Configure, select
                    Support Hash Passwords. Click OK. </emphasis></para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold"> Unselect Use Development
                    Defaults, if already selected. Specify the KeyStore. Click
                    on Validators, and specify the username validator.
                    </emphasis></para>

                    <para>The Username Validator created should extend
                    <emphasis>PasswordValidationCallback.WsitDigestPasswordValidator</emphasis>.
                    Here is a sample UsernameValidator for Digest passwords.
                    <example>
                            <programlisting language="java"
                                            linenumbering="unnumbered">import com.sun.xml.wss.impl.callback.PasswordValidationCallback;

public class SampleWsitDigestPasswordValidator extends
        PasswordValidationCallback.WsitDigestPasswordValidator {
    public  void setPassword(PasswordValidationCallback.Request request){
        //Get this password from somewhere - for example a JDBC Realm
        String passwd = "abcd!1234";
        PasswordValidationCallback.DigestPasswordRequest req =
                (PasswordValidationCallback.DigestPasswordRequest)request;
        req.setPassword(passwd);
    }
}</programlisting>
                        </example> <note>
                            <para>Use of Digest Passwords can be supported for
                            any realm which store plain passwords (not hashed
                            ones). Currently this is supported for JDBC realm in
                            GlassFish. Or optionally, a user can write his own
                            custom realm.</para>
                        </note></para>
                </listitem>
            </orderedlist>

            <para>The steps for securing the client remain same as in <xref
            linkend="ahiej" xrefstyle="select:title" />.</para>
        </section>

        <section xml:id="ahiem">
            <title>Example: Mutual Certificates Security (MCS)</title>

            <para>The section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrlc"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrkw"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrlc">
                <title>To Secure the Example Service Application (MCS)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahicw" xrefstyle="select:title" /> is used to
                    secure the application. To add security to the service
                    part of the example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> . </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect Reliable
                        Messaging if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select Mutual Certificates
                        Security. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code> .
                        This file contains the security elements within
                        <code>wsp:Policy</code> tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run.
                        </emphasis></para>

                        <para>A browser will open and display the WSDL file
                        for the application.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify that the WSDL file
                        contains the <code>AsymmetricBinding</code> element.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfrkw" xrefstyle="select:title" /> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrkw">
                <title>To Secure the Example Web Service Client Application
                (MCS)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. This web service is secured using
                    the security mechanism described in <xref linkend="ahicw"
                    xrefstyle="select:title" /> .</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> . </emphasis> <note>
                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> If you'd like, in the
                        tree, drill down from the project to Source Packages |
                        META-INF. Double-click on
                        <code>CalculatorWSService.xml</code> , click the
                        Source tab, and look at the section in the section
                        <code>&lt;wsp:All&gt;</code> to see the WSIT code that
                        has been added to this configuration file.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking the
                        CalculatorWSServletClient node and selecting Run. The
                        result of the add operation will display in a browser
                        window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahiep">
            <title>Example: Transport Security (SSL)</title>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrkg"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrlg"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrkg">
                <title>To Secure the Example Service Application (SSL)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    transport security to both the web service and to the web
                    service client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahicx" xrefstyle="select:title" /> is used to
                    secure the application. To add security to the service
                    part of the example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> : </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect Reliable
                        Messaging if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select Transport Security
                        (SSL). </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close the
                        dialog.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code> .
                        This file contains the security elements within
                        <code>wsp:Policy</code> tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> To require the service to
                        use the HTTPS protocol, security requirements must be
                        specified in the service's application deployment
                        descriptor, which is <code>web.xml</code> for a web
                        service implemented as a servlet. Selecting Use
                        Development Defaults takes care of this task for you.
                        </emphasis></para>

                        <para>To view or change the security information,
                        follow these steps:</para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold">From your web service
                                application, expand Web Pages |
                                WEB-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                <code>web.xml</code> to open it in the editor.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the Security
                                tab.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Expand the Security
                                Constraint named <code> SSL transport for
                                CalculatorWSService </code> . </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> A Web Resource
                                Collection named <code>Secure Area</code> contains
                                the URL Pattern to be protected,
                                <code>/CalculatorWSService//*</code> and the HTTP
                                Methods to be protected, , POST. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Unselect Enable
                                Authentication Constraint if it is
                                selected.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> The Enable User Data
                                Constraint box is checked and CONFIDENTIAL is chosen
                                as the Transport Guarantee to specify that the
                                application uses SSL. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Click the XML tab to
                                view the resulting deployment descriptor additions.
                                </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. If the
                        server presents its certificate, s1as, accept this
                        certificate. A browser will open and display the WSDL
                        file for the application. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfrlg" xrefstyle="select:title" /> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrlg">
                <title>To Secure the Example Web Service Client Application
                (SSL)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. This web service is secured using
                    the security mechanism described in <xref linkend="ahicx"
                    xrefstyle="select:title" /> .</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application by following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , with the exception that
                        you need to specify the secure WSDL when creating the
                        Web Service Client. </emphasis></para>

                        <para>To do this, create the client application up to
                        the step where you create the Servlet (step 5 as of
                        this writing) by following the steps described in
                        <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , with the following
                        exception.</para>

                        <para>In the step where you are directed to cut and
                        paste the URL of the web service that you want the
                        client to consume into the WSDL URL field, type
                        <emphasis>https</emphasis> <code>://</code>
                        <emphasis>fully-qualified-hostname:8181</emphasis>
                        <code>/CalculatorApplication/CalculatorWSService?wsdl</code>
                        (changes indicated in bold) to indicate that this
                        client should reference the web service using the
                        secure port. The first time you access this service,
                        accept the certificate (s1as) when you are prompted.
                        This is the server certificate popping up to confirm
                        its identity to the client.</para>

                        <para>In some cases, you might get an error dialog
                        telling you that the URL <code>https://</code>
                        <emphasis>fully-qualified-hostname</emphasis>
                        <code>:8181/CalculatorApplication/CalculatorWSService?wsdl</code>
                        couldn't be downloaded. However, this the correct URL,
                        and it does load when you run the service. So, when
                        this error occurs, repeat the steps that create the
                        Web Service Client using the secure WSDL. The second
                        time, the web service reference is created and you can
                        continue creating the client.</para>

                        <note>
                            <para>If you prefer to use localhost in place of the
                            fully-qualified hostname (FQHN) in this example, you
                            must follow the steps in <xref linkend="ahicy"
                            xrefstyle="select:title" /> .</para>
                        </note>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Continue creating the
                        client following the remainder of the instructions in
                        <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> . </emphasis> <note>
                                <para>Some users are working through this document
                                and just making the recommended changes and
                                refreshing the client. For this example, you must
                                create a new client so that you can specify the
                                secure WSDL to create the correct setup for the
                                client.</para>

                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking on the
                        CalculatorWSServletClient node and selecting Run. The
                        result of the add operation will display in a browser
                        window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahies">
            <title>Example: SAML Authorization over SSL (SA)</title>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrkp"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrkm"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrkp">
                <title>To Secure the Example Service Application (SA)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahida" xrefstyle="select:title" /> is used to
                    secure the application. The steps are similar to the ones
                    described in <xref linkend="ahiej"
                    xrefstyle="select:title" /> , with the addition of the
                    writing of a client-side SAML callback handler to populate
                    the client's request with a SAML assertion.</para>

                    <para>To add security to the service part of the example,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> : </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, right-click the
                        node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect the Reliable
                        Messaging option if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select SAML Authorization over
                        SSL. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Use Development
                        Defaults to have the <code>web.xml</code> file
                        modified to include a security constraint that forces
                        the use of SSL. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to exit the
                        editor.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code> .
                        This file contains the security elements within
                        <code>wsp:Policy</code> tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> To require the service to
                        use the HTTPS protocol, security requirements must be
                        specified in the service's application deployment
                        descriptor, which is <code>web.xml</code> for a web
                        service implemented as a servlet. Selecting Use
                        Development Defaults takes care of this task for you.
                        </emphasis></para>

                        <para>To view or change the security information in
                        the deployment descriptor, follow these steps:</para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold">From your web service
                                application, expand Web Pages |
                                WEB-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                <code>web.xml</code> to open it in the editor.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the Security
                                tab.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Expand the Security
                                Constraint named <code> SSL transport for
                                CalculatorWSService </code> . </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> A Web Resource
                                Collection named <code>Secure Area</code> contains
                                the URL Pattern to be protected,
                                <code>/CalculatorWSService//*</code> and the HTTP
                                Methods to be protected, , POST. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Unselect Enable
                                Authentication Constraint if it is
                                selected.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> The Enable User Data
                                Constraint box is checked and CONFIDENTIAL is chosen
                                as the Transport Guarantee to specify that the
                                application uses SSL. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Click the XML tab to
                                view the resulting deployment descriptor additions.
                                </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. Accept the
                        <code>s1as</code> certificate if you are prompted to.
                        A browser will open and display the WSDL file for the
                        application. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfrkm" xrefstyle="select:title" /> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrkm">
                <title>To Secure the Example Web Service Client Application
                (SA)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. This web service is secured using
                    the security mechanism described in <xref linkend="ahida"
                    xrefstyle="select:title" /> .</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> This example uses a
                        non-JSR-109-compliant client for variety. To do this,
                        create the client application up to the step where you
                        create the Servlet (step 5 as of this writing) by
                        following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , with the following
                        exceptions: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> In the step where you
                                are directed to cut and paste the URL of the web
                                service that you want the client to consume into the
                                WSDL URL field, type <code>https://</code>
                                <emphasis>fully-qualified-hostname</emphasis>
                                <code>:8181/CalculatorApplication/CalculatorWSService?wsdl</code>
                                , to indicate that this client should reference the
                                web service using the secure port.
                                </emphasis></para>

                                <para>The first time you access this service, accept
                                the certificate ( <code>s1as</code> ) when you are
                                prompted. This is the server certificate popping up
                                to confirm its identity to the client.</para>

                                <para>In some cases, you might get an error dialog
                                telling you that the URL <code>https://</code>
                                <emphasis>fully-qualified-hostname</emphasis>
                                <code>:8181/CalculatorApplication/CalculatorWSService?wsdl</code>
                                couldn't be downloaded. However, this the correct
                                URL, and it does load when you run the service. So,
                                when this error occurs, repeat the steps that create
                                the Web Service Client using the secure WSDL. The
                                second time, the web service reference is created
                                and you can continue creating the client.</para>

                                <note>
                                    <para>If you prefer to use <code>localhost</code> in
                                    place of the fully-qualified hostname (FQHN) in this
                                    example, follow the steps in <xref linkend="ahicy"
                                    xrefstyle="select:title" /> .</para>
                                </note>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Name the application
                                CalculatorClient (since it's not a servlet.).
                                </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Instead of creating a
                        client servlet as is described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , just add the web service
                        operation to the generated <code>index.jsp</code> file
                        to create a non-JSR-109 client. To do this, perform
                        these steps: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> If the
                                <code>index.jsp</code> file is not open in the right
                                pane, expand Web Pages, then double-click
                                <code>index.jsp</code> to open it.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Drill down through the
                                Web Service References node until you get to the
                                <code>add</code> operation. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Drag the
                                <code>add</code> operation to the line immediately
                                following the following line: </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;body&gt;</programlisting>
                                </example>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Edit the values for
                                <code>i</code> and <code>j</code> if you'd like.
                                </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Write a
                        <code>SAMLCallback</code> handler for the client side
                        to populate a SAML assertion into the client's request
                        to the service. </emphasis></para>

                        <para>To create the <code>SAMLCallbackHandler</code> ,
                        follow these steps:</para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold">Right-click the
                                CalculatorClient node.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select New | Java
                                Package.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> For Package Name, type
                                <code>xwss.saml</code> and click Finish.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Drill down from
                                CalculatorClient | Source Packages |
                                xwss.saml.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Right-click xwss.saml
                                and select New | Other.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">From the Categories
                                list, select Java.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> From the File Types
                                list, select Empty Java File and click Next.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> For Class Name, type
                                <code>SamlCallbackHandler</code> and click Finish.
                                </emphasis></para>

                                <para>The empty file appears in the IDE.</para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Download the example
                                file <code>SamlCallbackHandler.java</code> from the
                                following URL: </emphasis></para>

                                <para><link
                                xlink:href="http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645">http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645</link></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Open the file in a text
                                editor.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Modify the
                                <code>home</code> variable to provide the hard-coded
                                path to your GlassFish installation.
                                </emphasis></para>

                                <para>For example, modify the line:</para>

                                <example>
                                    <programlisting language="java"
                                                    linenumbering="unnumbered">String home = System.getProperty("WSIT_HOME");</programlisting>
                                </example>

                                <para>to</para>

                                <example>
                                    <programlisting language="java"
                                                    linenumbering="unnumbered">String home = "/home/glassfish";</programlisting>
                                </example>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Copy the contents of
                                this file into the
                                <code>SamlCallbackHandler.java</code> window that is
                                displaying in the IDE. </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold">Drill down from
                        CalculatorClient | Web Service
                        References.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click
                        CalculatorWSService and select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Quality of
                        Service tab of the CalculatorWSService dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Unselect Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Enter the name of the
                        SAML Callback Handler written earlier in this section,
                        <code>xwss.saml.SamlCallbackHandler</code> , into the
                        SAML Callback Handler field. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> To view the WSIT
                        Configuration options, in the tree, drill down from
                        the project to Source Packages | META-INF.
                        Double-click <code>CalculatorWSService.xml</code> ,
                        click the Source tab, and look for the lines where
                        <code>xwss.saml.SamlCallbackHandler</code> is
                        specified as the SAML Callback Handler class for the
                        client. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking the CalculatorClient
                        node and selecting Run. The result of the
                        <code>add</code> operation will display in a browser
                        window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahiev">
            <title>Example: SAML Sender Vouches with Certificates (SV)</title>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrki"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrjq"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrki">
                <title>To Secure the Example Service Application (SV)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahidc" xrefstyle="select:title" /> is used to
                    secure the application. The steps are similar to the ones
                    described in <xref linkend="ahiej"
                    xrefstyle="select:title" /> , with the addition of the
                    writing of a client-side SAML callback handler to populate
                    the client's request with a SAML assertion.</para>

                    <para>To add security to the service part of the example,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> : </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect the Reliable
                        Messaging option if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select SAML Sender Vouches
                        with Certificates. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Use Development
                        Defaults. This step properly configures the keystore,
                        truststore, and default user for this security
                        mechanism. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code> .
                        This file contains the security elements within
                        <code>wsp:Policy</code> tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. Accept the
                        <code>s1as</code> certificate if you are prompted to.
                        </emphasis></para>

                        <para>A browser will open and display the WSDL file
                        for the application.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfrjq" xrefstyle="select:title" /> .
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrjq">
                <title>To Secure the Example Web Service Client Application
                (SV)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. This web service is secured using
                    the security mechanism described in <xref linkend="ahidc"
                    xrefstyle="select:title" /> .</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> This example uses a
                        non-JSR-109-compliant client. To do this, create the
                        client application up to the step where you create the
                        Servlet (step 5 as of this writing) by following the
                        steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , with one exception: name
                        the application CalculatorClient (since it's not a
                        servlet.). </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Instead of creating a
                        client servlet as is described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> , just add the web service
                        operation to the generated <code>index.jsp</code> file
                        to create a non-JSR-109 client. To do this, follow
                        these steps: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> If the
                                <code>index.jsp</code> file is not open in the right
                                pane, double-click it to open it. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Drill down through the
                                Web Service References node until you get to the
                                <code>add</code> operation. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Drag the
                                <code>add</code> operation to the line immediately
                                following the following line: </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;body&gt;</programlisting>
                                </example>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Edit the values for
                                <code>i</code> and <code>j</code> if you'd like.
                                </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Write a
                        <code>SAMLCallback</code> handler for the client side
                        to populate a SAML assertion into the client's request
                        to the service. </emphasis></para>

                        <para>To create the <code>SAMLCallbackHandler</code> ,
                        follow these steps:</para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold">Right-click the
                                CalculatorClient node.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select New | Java
                                Package.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> For Package Name, type
                                <code>xwss.saml</code> and click Finish.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Drill down from
                                CalculatorClient | Source Packages |
                                xwss.saml.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Right-click xwss.saml
                                and select New | Other.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">From the Categories
                                list, select Java.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> From the File Types
                                list, select Empty Java File and click Next.
                                </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> For Class Name, type
                                <code>SamlCallbackHandler</code> and click Finish.
                                </emphasis></para>

                                <para>The empty file appears in the IDE.</para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Download the example
                                file <code>SamlCallbackHandler.java</code> from the
                                following URL: </emphasis></para>

                                <para><link
                                xlink:href="http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645">http://xwss.java.net/servlets/ProjectDocumentList?folderID=6645&amp;expandFolder=6645&amp;folderID=6645</link></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Open the file in a text
                                editor.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Modify the
                                <code>home</code> variable to provide the hard-coded
                                path to your GlassFish installation.
                                </emphasis></para>

                                <para>For example, modify the line:</para>

                                <example>
                                    <programlisting language="java"
                                                    linenumbering="unnumbered">String home = System.getProperty("WSIT_HOME");</programlisting>
                                </example>

                                <para>to</para>

                                <example>
                                    <programlisting language="java"
                                                    linenumbering="unnumbered">String home = "/home/glassfish";</programlisting>
                                </example>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Copy the contents of
                                this file into the
                                <code>SamlCallbackHandler.java</code> window that is
                                displaying in the IDE. </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold">Drill down from
                        CalculatorClient | Web Service
                        References.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click on
                        CalculatorWSService and select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Quality of
                        Service tab of the CalculatorWSService dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the SAML Callback
                        Handler field, type the name of the class written in
                        step 3 above,
                        <code>xwss.saml.SamlCallbackHandler</code> .
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Configure the keys: Click
                        on the keystore button, select the alias
                        "xws-security-client", enter the password "changeit",
                        in the password field. Submit this dialog; Click on
                        the truststore button, select the alias
                        "xws-security-server". Submit the dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the tree, drill down
                        from the project to Source Packages | META-INF.
                        Double-click CalculatorWSService.xml, click the Source
                        tab, and look for that lines where
                        <code>xwss.saml.SamlCallbackHandler</code> is
                        specified as the SAML Callback Handler class for the
                        client. In some instances, NetBeans will not correctly
                        specify the keystore and truststore information for
                        non-JSR-196 clients, and thus will require that the
                        keystore and truststore entries be manually
                        configured. To do this, follow the example in this
                        section. </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> Find the
                                <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> in
                                CalculatorWSService.xml, then just continue to the
                                next step. If not, replace the existing keystore and
                                truststore attributes to include these parameters.
                                The following code shows an example of how these
                                elements should be specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="xws-security-server"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking the CalculatorClient
                        node and selecting Run. The result of the add
                        operation will display in a browser window.
                        </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahiey">
            <title>Example: STS Issued Token (STS)</title>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrlq"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrmw"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrls"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <para>Another STS example application can be found at the
            following URL: <link
            xlink:href="https://github.com/javaee/metro-wsit/tree/master/wsit/samples/ws-trust">https://github.com/javaee/metro-wsit/tree/master/wsit/samples/ws-trust</link>
            .</para>

            <task xml:id="gfrlq">
                <title>To Create and Secure the STS (STS)</title>

                <tasksummary>
                    <para>To create and secure a Security Token Service for
                    this example, follow these steps. <note>
                            <para>For development with NetBeans 6.8, there are
                            some temporary setup changes that will need to be
                            done--see <link
                            xlink:href="http://old.nabble.com/Create-STS-with-Netbeans-6.8-and-Glassfish-V3-td27597150r0.html">here</link>
                            for more details.</para>
                        </note></para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create a new project for
                        the STS by selecting File | New Project.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Java Web, then Web
                        Application, then Next.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Type
                        <code>MySTSProject</code> for the Project Name, then
                        Next, then the desired Server. Click
                        Finish.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        <code>MySTSProject</code> node, select New, then
                        select Other. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Web Services from
                        the Categories list.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Secure Token
                        Service (STS) from the File Type(s) list, then click
                        Next. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type the name
                        <code>MySTS</code> for the Web Service Class Name.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Enter or select
                        <code>org.me.my.sts</code> in the Package field, then
                        click Finish. If prompted to reload the
                        <code>catalog.xml</code> file, click No.
                        </emphasis></para>

                        <para>The IDE takes a while to create the STS. When
                        created, it appears under the project's Web Services
                        node as <code>MySTSService</code> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The STS wizard creates an
                        implementation of the provider class. To view it,
                        expand Source Packages, then org.me.my.sts.
                        Double-click <code>MySTS.java</code> to open it in the
                        right pane. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Projects window,
                        expand the MySTSProject node, then expand the Web
                        Services node. Right-click the
                        MySTSService[IMySTSService_Port] node and select Edit
                        Web Service Attributes to configure the STS.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure Service if
                        it's not already selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify that the Security
                        Mechanism of Username Authentication with Symmetric
                        Key is selected. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Configure
                        button. For Algorithm Suite, verify that Basic128 bit
                        is selected (so that it matches the value selected for
                        the service.) Select OK to close the configuration
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> If not already selected,
                        select Act as Secure Token Service (STS). </emphasis>
                        <note>
                                <para>If you'd like to use an STS other than the
                                default, click the STS Configure button, and click
                                the Add button to add a different service provider.
                                Click OK to close the STS Configuration
                                dialog.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. In the
                        Issuer field, enter MySTS. Click OK to close.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click the Keystore button
                        to provide your keystore with the alias identifying
                        the service certificate and private key. To do this,
                        click the Load Aliases button, select
                        <code>wssip</code> , then click OK to close the
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Configuration Files |
                        xml-resources | web-services | MySTS | wsdl, then
                        double-click the file <code>MySTSService.wsdl</code> .
                        This file contains the
                        <code>tc:STSConfiguration</code> element within the
                        <code>wsp:Policy</code> elements..</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        MySTSProject tab, select Properties. Select the Run
                        category, and type the following in the Relative URL
                        field: <code>/MySTSService?wsdl</code> .
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Run the Project
                        (right-click the project and select
                        Run).</emphasis></para>

                        <para>The STS WSDL appears in the browser.</para>
                    </step>
                </procedure>
            </task>

            <para>Check <xref linkend="custom-sts" xrefstyle="select:title" />
            to build a custom STS to control the user attributes to be
            included in the SAML assertion.</para>

            <task xml:id="gfrmw">
                <title>To Secure the Example Service Application (STS)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahide" xrefstyle="select:title" /> is used to
                    secure the application. The steps are similar to the ones
                    described in <xref linkend="ahiej"
                    xrefstyle="select:title" /> , with the addition of
                    creating and securing an STS.</para>

                    <para>To add security to the service part of the example,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> . </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet). </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect the Reliable
                        Messaging option if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select STS Issued Token.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. For
                        Issuer Address and Issuer Metadata Address, enter
                        <code>http://localhost:8080/MySTSProject/MySTSService</code>
                        . For Issuer Metadata, enter
                        <code>http://localhost:8080/MySTSProject/MySTSService/mex</code>
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> For Algorithm Suite,
                        select Basic 128 bit. For Key Size, select 128 (the
                        algorithm suite value of the service must match the
                        algorithm suite value of the STS). Select OK to close
                        the configuration dialog. </emphasis> <note>
                                <para>If you have configured Unlimited Strength
                                Encryption as described in <xref linkend="gfrig"
                                xrefstyle="select:title" /> , you can leave the key
                                size at 256. Otherwise, you must set it to
                                128.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code>
                        and select the Source page. This file contains the
                        security elements within <code>wsp:Policy</code>
                        tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. This step
                        compiles the application and deploys it onto
                        GlassFish. A browser will open and display the WSDL
                        file for the application. </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrls">
                <title>To Secure the Example Web Service Client Application
                (STS)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the
                    CalculatorApplication's web service client. The service
                    was secured using the security mechanism described in
                    <xref linkend="ahide" xrefstyle="select:title" /> .</para>

                    <para>To add security to the web service client, complete
                    the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application by following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> . </emphasis> <note>
                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Drill down from
                        CalculatorWSServletClient | Web Service References.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click
                        CalculatorWSService and select Edit Web Service
                        Attributes, then select the Quality of Service tab.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the client's
                        private key by pointing to an alias in the keystore.
                        To do this, click the Keystore button, click the Load
                        Aliases button, and select
                        <code>xws-security-client</code> from the Alias list.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the service's
                        certificate by pointing to an alias in the client
                        truststore. To do this, click the Truststore button,,
                        click the Load Aliases button for the truststore and
                        select <code>xws-security-server</code> from the Alias
                        list. </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> In some instances,
                                NetBeans will not detect that this client is a
                                JSR-196 client, and thus will require that the
                                keystore and truststore entries be manually
                                configured. To do this, follow the steps in this
                                section. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Expand
                                CalculatorWSServletClient | Source Packages |
                                META-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                CalculatorWSService.xml to open it in the Source
                                window. Click the Source tab to view the code. Find
                                the <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> ,
                                then just continue to the next section. If not, add
                                these attributes to this file. The following code
                                shows an example of how these elements should be
                                specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="xws-security-server"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand the Security Token
                        Service node to provide details for the STS to be
                        used. When the Endpoint and the Metadata values are
                        the same, you only need to enter the Endpoint value.
                        For the Endpoint field, enter the following value:
                        http://localhost:8080/MySTSProject/MySTSService. For
                        WS Trust Version field, select 1.3 if STS endpoint
                        uses ".NET 3.5 / Metro 1.3" version compatibility.
                        Otherwise use the default WS Trust Version.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The service requires a
                        token to be issued from the STS at
                        <code>http://localhost:8080/MySTSProject/MySTSService</code>
                        , with WSDL file
                        <code>http://localhost:8080/MySTSProject/MySTSService?wsdl</code>
                        . To do this, follow these steps: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> Right-click the
                                CalculatorWSServletClient node and select New | Web
                                Service Client. </emphasis></para>

                                <para>The New Web Service Client window
                                appears.</para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the WSDL URL
                                option.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Cut and paste the URL
                                of the web service that you want the client to
                                consume into the WSDL URL field. For this example,
                                here is the URL for the <code>MySTS</code> web
                                service: </emphasis></para>

                                <programlisting>http://localhost:8080/MySTSProject/MySTSService?wsdl</programlisting>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Type
                                <code>org.me.calculator.client.sts</code> in the
                                Package field, then click Finish. </emphasis></para>

                                <para>The Projects window displays the new web
                                service client.</para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Drill down from
                        CalculatorWSServletClient | Web Service References.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Right-click MySTSService
                        and select Edit Web Service
                        Attributes.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Quality of
                        Service tab of the MySTSService dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the client's
                        private key by pointing to an alias in the keystore.
                        To do this, click the Keystore button, click the Load
                        Aliases button, and select
                        <code>xws-security-client</code> from the Alias list.
                        If the Keystore button is not selectable, follow the
                        instructions in the next step for adding the keystore
                        entry manually. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify the STS's
                        certificate by pointing to an alias in the client
                        truststore. To do this, click the Truststore button,,
                        click the Load Aliases button and select
                        <code>wssip</code> from the Alias list.
                        </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> In some instances,
                                NetBeans will not detect that this client is a
                                JSR-196 client, and thus will require that the
                                keystore and truststore entries be manually
                                configured. To do this, follow the steps in this
                                section. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Expand
                                CalculatorWSServletClient | Source Packages |
                                META-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                MySTSService.xml to open it in the Source window.
                                Click the Source tab to view the code. Find the
                                <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> ,
                                then just continue to the next section. If not, add
                                these attributes to this file. The following code
                                shows an example of how these elements should be
                                specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="wssip"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Enter the default user
                        name and password.</emphasis></para>

                        <para>If you followed the steps in <xref
                        linkend="ahidj" xrefstyle="select:title" /> , this
                        will be User Name <code>wsitUser</code> and Password
                        <code>changeit</code> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking the
                        CalculatorWSServletClient project and selecting Run.
                        The result of the add operation will display in a
                        browser window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahiex">
            <title>Example: Broker Trust STS (BT)</title>

            <para>Broker Trust STS example illustrates the interaction between
            client and server of different domains through STS's of
            corresponding domains. In this kind of scenarios, STS of different
            domains must have a trust relationship between them. Lets take
            client/STS2 are in domain A, and server/STS1 are in domain B.
            Here, STS1 is the remote STS on the server domain(B) and STS2 is
            the local STS on the client domain(B). There is a trust
            relationship between STS1 and STS2. Here are steps which client
            has to follow to comminicate with server. <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold"> Client wants to
                        communicate with Server. </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> Server asks Client to get
                        a token from STS1 to comminicate with it.
                        </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> Now Client would like to
                        communicate with remote STS (i.e. STS1).
                        </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> STS1 asks Client to get a
                        token from Client's local STS (i.e. STS2) to
                        comminicate with it. </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> Now Client sends a
                        request to local STS (i.e. STS2) asking for a token to
                        communicate with STS1. </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> STS2 issues a token to
                        Client, which Client uses to comminicate with STS1.
                        </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> STS1 issues a token to
                        Client, which Client uses to comminicate with Server.
                        </emphasis></para>
                    </listitem>

                    <listitem>
                        <para><emphasis role="bold"> Now Client comminicates
                        with server using a token issued by STS1, which Server
                        understands. </emphasis></para>
                    </listitem>
                </itemizedlist></para>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrla"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrlb"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrmp"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrlr"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <task xml:id="gfrla">
                <title>To Create and Secure the First STS (BT)</title>

                <tasksummary>
                    <para>To create and secure a Security Token Service(i.e.
                    Remote STS) for this example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create a new project for
                        the STS by selecting File | New Project.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Web, then Web
                        Application, then Next.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type <code>
                        MySTS1Project</code> for the Project Name, then click
                        Finish. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the <code>
                        MySTS1Project</code> node, select New, then select
                        Other. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Web Services from
                        the Categories list.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Secure Token
                        Service (STS) from the File Type(s) list, then click
                        Next. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type the name
                        <code>MySTS1</code> for the Web Service Class Name.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Enter or select
                        <code>org.me.my.sts1</code> in the Package field, then
                        click Finish. If prompted to reload the
                        <code>catalog.xml</code> file, click No.
                        </emphasis></para>

                        <para>The IDE takes a while to create the first STS.
                        When created, it appears under the project's Web
                        Services node as <code>MySTS1Service</code> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The STS wizard creates an
                        implementation of the provider class. To view it,
                        expand Source Packages, then org.me.my.sts1.
                        Double-click <code>MySTS1.java</code> to open it in
                        the right pane. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Projects window,
                        expand the MySTS1Service node, then expand the Web
                        Services node. Right-click the
                        MySTS1Service[IMySTS1Service_Port] node and select
                        Edit Web Service Attributes to configure the STS.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure Service if
                        it's not already selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify that the Security
                        Mechanism of "STS Issued Token" is selected.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Configure
                        button. For Algorithm Suite, verify that Basic128 bit
                        is selected (so that it matches the value selected for
                        the service.) Select OK to close the configuration
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> If not already selected,
                        select Act as Secure Token Service (STS). </emphasis>
                        <note>
                                <para>If you'd like to use an STS other than the
                                default, click the STS Configure button, and click
                                the Add button to add a different service provider.
                                Click OK to close the STS Configuration
                                dialog.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. In the
                        Issuer field, enter MySTS1. Click OK to close.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click the Keystore button
                        to provide your keystore with the alias identifying
                        the service certificate and private key. To do this,
                        click the Load Aliases button, select
                        <code>wssip</code> , then click OK to close the
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Configuration Files |
                        xml-resources | web-services | MySTS1 | wsdl, then
                        double-click the file <code>MySTS1Service.wsdl</code>
                        . This file contains the
                        <code>tc:STSConfiguration</code> element within the
                        <code>wsp:Policy</code> elements..</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        MySTS1Project tab, select Properties. Select the Run
                        category, and type the following in the Relative URL
                        field: <code>/MySTS1Service?wsdl</code> .
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Run the Project
                        (right-click the project and select
                        Run).</emphasis></para>

                        <para>The STS WSDL appears in the browser.</para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrlb">
                <title>To Create and Secure the Second STS (BT)</title>

                <tasksummary>
                    <para>To create and secure a Security Token Service(i.e.
                    local STS) for this example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create a new project for
                        the 2nd STS by selecting File | New Project.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Web, then Web
                        Application, then Next.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type <code>
                        MySTS2Project</code> for the Project Name, then click
                        Finish. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the <code>
                        MySTS2Project</code> node, select New, then select
                        Other. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Web Services from
                        the Categories list.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Secure Token
                        Service (STS) from the File Type(s) list, then click
                        Next. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Type the name
                        <code>MySTS2</code> for the Web Service Class Name.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Enter or select
                        <code>org.me.my.sts2</code> in the Package field, then
                        click Finish. If prompted to reload the
                        <code>catalog.xml</code> file, click No.
                        </emphasis></para>

                        <para>The IDE takes a while to create the first STS.
                        When created, it appears under the project's Web
                        Services node as <code>MySTS2Service</code> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The STS wizard creates an
                        implementation of the provider class. To view it,
                        expand Source Packages, then org.me.my.sts2.
                        Double-click <code>MySTS2.java</code> to open it in
                        the right pane. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Projects window,
                        expand the MySTS2Service node, then expand the Web
                        Services node. Right-click the
                        MySTS2Service[IMySTS2Service_Port] node and select
                        Edit Web Service Attributes to configure the STS.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure Service if
                        it's not already selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify that the Security
                        Mechanism of Username Authentication with Symmetric
                        Key is selected. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Configure
                        button. For Algorithm Suite, verify that Basic128 bit
                        is selected (so that it matches the value selected for
                        the service.) Select OK to close the configuration
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> If not already selected,
                        select Act as Secure Token Service (STS). </emphasis>
                        <note>
                                <para>If you'd like to use an STS other than the
                                default, click the STS Configure button, and click
                                the Add button to add a different service provider.
                                Click OK to close the STS Configuration
                                dialog.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. In the
                        Issuer field, enter MySTS2. Click OK to close.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click the Keystore button
                        to provide your keystore with the alias identifying
                        the service certificate and private key. To do this,
                        click the Load Aliases button, select
                        <code>wssip</code> , then click OK to close the
                        dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Configuration Files |
                        xml-resources | web-services | MySTS2 | wsdl, then
                        double-click the file <code>MySTS2Service.wsdl</code>
                        . This file contains the
                        <code>tc:STSConfiguration</code> element within the
                        <code>wsp:Policy</code> elements..</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        MySTS2Project tab, select Properties. Select the Run
                        category, and type the following in the Relative URL
                        field: <code>/MySTS2Service?wsdl</code> .
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Run the Project
                        (right-click the project and select
                        Run).</emphasis></para>

                        <para>The STS WSDL appears in the browser.</para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrmp">
                <title>To Secure the Example Service Application (BT)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahide" xrefstyle="select:title" /> is used to
                    secure the application. The steps are similar to the ones
                    described in <xref linkend="ahiej"
                    xrefstyle="select:title" />, with the addition of creating
                    and securing an STS.</para>

                    <para>To add security to the service part of the example,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> . </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet). </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect the Reliable
                        Messaging option if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select STS Issued Token.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. For
                        Issuer Address and Issuer Metadata Address, enter
                        <code>http://localhost:8080/MySTS1Project/MySTS1Service</code>
                        . For Issuer Metadata, enter
                        <code>http://localhost:8080/MySTS1Project/MySTS1Service/mex</code>
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> For Algorithm Suite,
                        select Basic 128 bit. For Key Size, select 128 (the
                        algorithm suite value of the service must match the
                        algorithm suite value of the STS). Select OK to close
                        the configuration dialog. </emphasis> <note>
                                <para>If you have configured Unlimited Strength
                                Encryption as described in <xref linkend="gfrig"
                                xrefstyle="select:title" /> , you can leave the key
                                size at 256. Otherwise, you must set it to
                                128.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code>
                        and select the Source page. This file contains the
                        security elements within <code>wsp:Policy</code>
                        tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Properties.
                        Select the Run category, and type the following in the
                        Relative URL field:
                        <code>/CalculatorWSService?wsdl</code> .
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. This step
                        compiles the application and deploys it onto
                        GlassFish. A browser will open and display the WSDL
                        file for the application. </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfrlr">
                <title>To Secure the Example Web Service Client Application
                (BT)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the
                    CalculatorApplication's web service client. The service
                    was secured using the security mechanism described in
                    <xref linkend="ahide" xrefstyle="select:title" /> .</para>

                    <para>To add security to the web service client, complete
                    the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application by following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" /> . </emphasis> <note>
                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Drill down from
                        CalculatorWSServletClient | Web Service References.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click
                        CalculatorWSService and select Edit Web Service
                        Attributes, then select the Quality of Service tab.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the client's
                        private key by pointing to an alias in the keystore.
                        To do this, click the Keystore button, click the Load
                        Aliases button, and select
                        <code>xws-security-client</code> from the Alias list.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the service's
                        certificate by pointing to an alias in the client
                        truststore. To do this, click the Truststore button,,
                        click the Load Aliases button for the truststore and
                        select <code>xws-security-server</code> from the Alias
                        list. </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> In some instances,
                                NetBeans will not detect that this client is a
                                JSR-196 client, and thus will require that the
                                keystore and truststore entries be manually
                                configured. To do this, follow the steps in this
                                section. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Expand
                                CalculatorWSServletClient | Source Packages |
                                META-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                CalculatorWSService.xml to open it in the Source
                                window. Click the Source tab to view the code. Find
                                the <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> ,
                                then just continue to the next section. If not, add
                                these attributes to this file. The following code
                                shows an example of how these elements should be
                                specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="xws-security-server"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The service requires a
                        token to be issued from the first STS (i.e Remote STS)
                        at
                        <code>http://localhost:8080/MySTS1Project/MySTS1Service</code>
                        , with WSDL file
                        <code>http://localhost:8080/MySTS1Project/MySTS1Service?wsdl</code>.
                        To do this, follow these steps: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> Right-click the
                                CalculatorWSServletClient node and select New | Web
                                Service Client. </emphasis></para>

                                <para>The New Web Service Client window
                                appears.</para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the WSDL URL
                                option.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Cut and paste the URL
                                of the web service that you want the client to
                                consume into the WSDL URL field. For this example,
                                here is the URL for the <code>MySTS1</code> web
                                service: </emphasis></para>

                                <programlisting>http://localhost:8080/MySTS1Project/MySTS1Service?wsdl</programlisting>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Type
                                <code>org.me.calculator.client.sts1</code> in the
                                Package field, then click Finish. </emphasis></para>

                                <para>The Projects window displays the new web
                                service client.</para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Drill down from
                        CalculatorWSServletClient | Web Service References.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Right-click MySTS1Service
                        and select Edit Web Service
                        Attributes.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Quality of
                        Service tab of the MySTS1Service dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the client's
                        private key by pointing to an alias in the keystore.
                        To do this, click the Keystore button, click the Load
                        Aliases button, and select
                        <code>xws-security-client</code> from the Alias list.
                        If the Keystore button is not selectable, follow the
                        instructions in the next step for adding the keystore
                        entry manually. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify the STS's
                        certificate by pointing to an alias in the client
                        truststore. To do this, click the Truststore button,,
                        click the Load Aliases button and select
                        <code>wssip</code> from the Alias list.
                        </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> In some instances,
                                NetBeans will not detect that this client is a
                                JSR-196 client, and thus will require that the
                                keystore and truststore entries be manually
                                configured. To do this, follow the steps in this
                                section. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Expand
                                CalculatorWSServletClient | Source Packages |
                                META-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                MySTSService.xml to open it in the Source window.
                                Click the Source tab to view the code. Find the
                                <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> ,
                                then just continue to the next section. If not, add
                                these attributes to this file. The following code
                                shows an example of how these elements should be
                                specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="wssip"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand the Security Token
                        Service node to provide details for the second
                        STS(i.e. local STS) to be used. When the Endpoint and
                        the Metadata values are the same, you only need to
                        enter the Endpoint value. For the Endpoint field,
                        enter the following value:
                        http://localhost:8080/MySTS2Project/MySTS2Service. For
                        WS Trust Version field, select 1.3 if STS endpoint
                        uses ".NET 3.5 / Metro 1.3" version compatibility.
                        Otherwise use the default WS Trust Version.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> The First STS(i.e. Remote
                        STS) requires a token to be issued from the second
                        STS(i.e. local STS) at
                        <code>http://localhost:8080/MySTS2Project/MySTS2Service</code>
                        , with WSDL file
                        <code>http://localhost:8080/MySTS2Project/MySTS2Service?wsdl</code>
                        . To do this, follow these steps: </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> Right-click the
                                CalculatorWSServletClient node and select New | Web
                                Service Client. </emphasis></para>

                                <para>The New Web Service Client window
                                appears.</para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Select the WSDL URL
                                option.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Cut and paste the URL
                                of the web service that you want the client to
                                consume into the WSDL URL field. For this example,
                                here is the URL for the <code>MySTS2</code> web
                                service: </emphasis></para>

                                <programlisting>http://localhost:8080/MySTS2Project/MySTS2Service?wsdl</programlisting>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Type
                                <code>org.me.calculator.client.sts2</code> in the
                                Package field, then click Finish. </emphasis></para>

                                <para>The Projects window displays the new web
                                service client.</para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Drill down from
                        CalculatorWSServletClient | Web Service References.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Right-click MySTS2Service
                        and select Edit Web Service
                        Attributes.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Quality of
                        Service tab of the MySTS2Service dialog.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Provide the client's
                        private key by pointing to an alias in the keystore.
                        To do this, click the Keystore button, click the Load
                        Aliases button, and select
                        <code>xws-security-client</code> from the Alias list.
                        If the Keystore button is not selectable, follow the
                        instructions in the next step for adding the keystore
                        entry manually. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Verify the STS's
                        certificate by pointing to an alias in the client
                        truststore. To do this, click the Truststore button,,
                        click the Load Aliases button and select
                        <code>wssip</code> from the Alias list.
                        </emphasis></para>

                        <stepalternatives>
                            <step>
                                <para><emphasis role="bold"> In some instances,
                                NetBeans will not detect that this client is a
                                JSR-196 client, and thus will require that the
                                keystore and truststore entries be manually
                                configured. To do this, follow the steps in this
                                section. </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Expand
                                CalculatorWSServletClient | Source Packages |
                                META-INF.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> Double-click
                                MySTS2Service.xml to open it in the Source window.
                                Click the Source tab to view the code. Find the
                                <code>sc:KeyStore</code> and
                                <code>sc:TrustStore</code> elements. If these
                                elements contain parameters for
                                <code>location</code> and <code>storepass</code> ,
                                then just continue to the next section. If not, add
                                these attributes to this file. The following code
                                shows an example of how these elements should be
                                specified. </emphasis></para>

                                <example>
                                    <programlisting language="xml"
                                                    linenumbering="unnumbered">&lt;sc:TrustStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\cacerts.jks"
   storepass="changeit" peeralias="wssip"/&gt;
&lt;sc:KeyStore
   wspp:visibility="private"
   location="&lt;GF_HOME&gt;\glassfish\domains\domain1\config\keystore.jks"
   storepass="changeit" alias="xws-security-client"/&gt;</programlisting>
                                </example>
                            </step>
                        </stepalternatives>
                    </step>

                    <step>
                        <para><emphasis role="bold">Enter the default user
                        name and password.</emphasis></para>

                        <para>If you followed the steps in <xref
                        linkend="ahidj" xrefstyle="select:title" /> , this
                        will be User Name <code>wsitUser</code> and Password
                        <code>changeit</code> .</para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click OK to close this
                        dialog.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Compile and run this
                        application by right-clicking the
                        CalculatorWSServletClient project and selecting Run.
                        The result of the add operation will display in a
                        browser window. </emphasis></para>
                    </step>
                </procedure>
            </task>
        </section>

        <section xml:id="ahiez">
            <title>Example: STS Issued Token With SecureConversation
            (STS+SC)</title>

            <para>This example illustrates, how SecureConversation Token is
            used to interact with STS. To have a basic idea of
            SecureConversation, find this article : <emphasis role="bold">
            <link
            xlink:href="http://blogs.sun.com/enterprisetechtips/entry/secure_conversations_for_web_services">Secure
            Conversations for Web Services With Metro</link>
            </emphasis></para>

            <para>This section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfrle"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrlf"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfrmg"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <formalpara xml:id="gfrle">
                <title>To Create and Secure the STS with
                SecureConversationToken (STS+SC)</title>

                <para/>
            </formalpara>

            <para>Same as provided in <xref linkend="gfrlq"
            xrefstyle="select:title" /></para>

            <task xml:id="gfrlf">
                <title>To Secure the Example Service Application
                (STS+SC)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, the security mechanism of <xref
                    linkend="ahide" xrefstyle="select:title" /> is used to
                    secure the application. The steps are similar to the ones
                    described in <xref linkend="ahiej"
                    xrefstyle="select:title" /> , with the addition of
                    creating and securing an STS.</para>

                    <para>To add security to the service part of the example,
                    follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" /> . </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet). </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service, CalculatorWS, and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the "Version
                        Compatibility" to ".NET 3.5 / Metro 1.3" ( e.g. see
                        <xref linkend="gfrct" xrefstyle="select:title" /> ) .
                        It will use WS-SX version of all WS-* specifications.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect the Reliable
                        Messaging option if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Secure
                        Service.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select STS Issued Token.
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click Configure. For
                        Issuer Address and Issuer Metadata Address, enter
                        <code>http://localhost:8080/MySTSProject/MySTSService</code>
                        . For Issuer Metadata, enter
                        <code>http://localhost:8080/MySTSProject/MySTSService/mex</code>
                        </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select the Configure
                        button and do the following :</emphasis></para>

                        <para><emphasis role="bold"> For Algorithm Suite,
                        verify that Basic128 bit is selected (so that it
                        matches the value selected for the
                        service.)</emphasis></para>

                        <para><emphasis role="bold"> Check the Establish
                        Secure Session (Secure Conversation) check box to
                        enable the secure conversaion
                        feature</emphasis></para>

                        <note>
                            <para>If you have configured Unlimited Strength
                            Encryption as described in <xref linkend="gfrig"
                            xrefstyle="select:title" /> , you can leave the key
                            size at 256. Otherwise, you must set it to
                            128.</para>
                        </note>

                        <para><emphasis role="bold"> Select OK to close the
                        configuration dialog. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Select Use Development
                        Defaults.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Click
                        OK.</emphasis></para>

                        <para>A new file is added to the project. To view the
                        WSIT configuration file, expand Web Pages | WEB-INF,
                        then double-click the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code>
                        and select the Source page. This file contains the
                        security elements within <code>wsp:Policy</code>
                        tags.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. This step
                        compiles the application and deploys it onto
                        GlassFish. A browser will open and display the WSDL
                        file for the application. </emphasis></para>
                    </step>
                </procedure>
            </task>

            <formalpara xml:id="gfrmg">
                <title>To Secure the Example Web Service Client Application
                (STS+SC)</title>

                <para/>
            </formalpara>

            <para>Same as provided in <xref linkend="gfrls"
            xrefstyle="select:title" /></para>
        </section>

        <section xml:id="gfzhh">
            <title>Example: Kerberos Token (Kerb)</title>

            <para>This section contains the steps for running a Kerberos Token
            Profile-based WS Security scenario. Kerberos support was added to
            Metro in 1.1 release. The Netbeans support for configuring a
            Kerberos Token based secure web service is available from Metro
            1.3 and Netbeans 6.5.</para>

            <para>For an article discussing using Kerberos with WSIT, go to
            <link
            xlink:href="http://blogs.sun.com/enterprisetechtips/entry/building_kerberos_based_secure_services">Building
            Kerberos-Based Secure Services Using Metro</link>. This article
            has a sample application, but does not use Netbeans IDE.</para>

            <para>The section describes the following tasks:</para>

            <itemizedlist>
                <listitem>
                    <para><xref linkend="gfzgj"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfzgt"
                    xrefstyle="select:title" /></para>
                </listitem>

                <listitem>
                    <para><xref linkend="gfzhj"
                    xrefstyle="select:title" /></para>
                </listitem>
            </itemizedlist>

            <formalpara xml:id="gfzgj">
                <title>To Set Up Your System for Kerberos Profile</title>

                <para/>
            </formalpara>

            <para>If your system is not already set up to use Kerberos, refer
            to the steps mentioned in <xref linkend="ConfiguringKerberos"
            xrefstyle="select:title" />.</para>

            <task xml:id="gfzgt">
                <title>To Secure the Example Service Application
                (Kerb)</title>

                <tasksummary>
                    <para>The following example application starts with the
                    example provided in <xref
                    linkend="using_metro-developing_with_nb"
                    xrefstyle="select:title" /> and demonstrates adding
                    security to both the web service and to the web service
                    client.</para>

                    <para>For this example, a Kerberos token is used to secure
                    the application. To add security to the service part of
                    the example, follow these steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the
                        CalculatorApplication example by following the steps
                        described in the following sections of <xref
                        linkend="using_metro-developing_with_nb"
                        xrefstyle="select:title" />. </emphasis></para>

                        <substeps>
                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibp"
                                xrefstyle="select:title" /> </emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold">Skip the section on
                                adding Reliable Messaging.</emphasis></para>
                            </step>

                            <step>
                                <para><emphasis role="bold"> <xref linkend="ahibr"
                                xrefstyle="select:title" /> (first two steps only,
                                do not run the project yet) </emphasis></para>
                            </step>
                        </substeps>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Expand
                        CalculatorApplication | Web Services, then right-click
                        the node for the web service (CalculatorWS) and select
                        Edit Web Service Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Deselect Reliable
                        Messaging if it is selected.</emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the
                        CalculatorWSPortBinding section, select Secure
                        Service. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> From the drop-down list
                        for Security Mechanism, select Symmetric Binding with
                        Kerberos Tokens. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Select Kerberos button,
                        and specify the Login Module to be used for the
                        service. For details on Login Module to specify refer
                        <xref linkend="ConfiguringKerberos"
                        xrefstyle="select:title" />. </emphasis> <figure
                                xml:id="kerberosServerConfig">
                                <title>Kerberos Configuration Attributes -
                                Service</title>

                                <mediaobject>
                                    <imageobject>
                                        <imagedata contentdepth="100%"
                                                   fileref="figures/kerberos_server_config.png"
                                                   scalefit="1" width="100%"/>
                                    </imageobject>

                                    <textobject>
                                        <simpara>Screen shot of web service attributes
                                        editor page</simpara>
                                    </textobject>
                                </mediaobject>
                            </figure></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Click OK to close the
                        <code>CalculatorWSService</code> dialog.
                        </emphasis></para>

                        <para>Expand Web Pages | WEB-INF, then double-click
                        the file
                        <code>wsit-org.me.calculator.CalculatorWS.xml</code>
                        to open it in the edit window.The Binding level policy
                        looks like: (This section of code has been formatted
                        to fit the page)</para>

                        <example>
                            <programlisting language="xml"
                                            linenumbering="unnumbered">&lt;wsp:Policy wsu:Id="IFinancialService_policy"&gt;
   &lt;wsp:ExactlyOne&gt;
      &lt;wsp:All&gt;
         &lt;wsaws:UsingAddressing
                 xmlns:wsaws="http://www.w3.org/2006/05/addressing/wsdl"/&gt;
         &lt;sp:SymmetricBinding&gt;
            &lt;wsp:Policy&gt;
               &lt;sp:ProtectionToken&gt;
                  &lt;wsp:Policy&gt;
                     &lt;sp:KerberosToken
                             sp:IncludeToken="http://docs.oasis-open.org/
                        ws-sx/ws-securitypolicy/200702/IncludeToken/Once"&gt;
                        &lt;wsp:Policy&gt;
                           &lt;sp:WssGssKerberosV5ApReqToken11/&gt;
                        &lt;/wsp:Policy&gt;
                     &lt;/sp:KerberosToken&gt;
                  &lt;/wsp:Policy&gt;
               &lt;/sp:ProtectionToken&gt;
               &lt;sp:Layout&gt;
                  &lt;wsp:Policy&gt;
                     &lt;sp:Strict/&gt;
                  &lt;/wsp:Policy&gt;
               &lt;/sp:Layout&gt;
               &lt;sp:IncludeTimestamp/&gt;
               &lt;sp:OnlySignEntireHeadersAndBody/&gt;
               &lt;sp:AlgorithmSuite&gt;
                  &lt;wsp:Policy&gt;
                     &lt;sp:Basic128/&gt;
                  &lt;/wsp:Policy&gt;
               &lt;/sp:AlgorithmSuite&gt;
            &lt;/wsp:Policy&gt;
         &lt;/sp:SymmetricBinding&gt;
         &lt;sp:Wss11&gt;
            &lt;wsp:Policy&gt;
               &lt;sp:MustSupportRefKeyIdentifier/&gt;
               &lt;sp:MustSupportRefIssuerSerial/&gt;
               &lt;sp:MustSupportRefThumbprint/&gt;
               &lt;sp:MustSupportRefEncryptedKey/&gt;
            &lt;/wsp:Policy&gt;
         &lt;/sp:Wss11&gt;
         &lt;sc:KerberosConfig xmlns:
                            sc="http://schemas.sun.com/2006/03/wss/server"
                            loginModule="KerberosServer"/&gt;
      &lt;/wsp:All&gt;
   &lt;/wsp:ExactlyOne&gt;
&lt;/wsp:Policy&gt;</programlisting>
                        </example>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorApplication node and select Run. A browser
                        will open and display the WSDL file for the
                        application. </emphasis></para>

                        <para>If the application doesn't build, expand
                        CalculatorApplication | Web Pages | WEB-INF, and
                        double-click <code>web.xml</code> to open it in the
                        right pane. Select the Security tab, and remove any
                        existing security constraints. Then run the project
                        again.</para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Follow the steps to
                        secure the client application as described in <xref
                        linkend="gfzhj" xrefstyle="select:title" />.
                        </emphasis></para>
                    </step>
                </procedure>
            </task>

            <task xml:id="gfzhj">
                <title>To Secure the Example Web Service Client Application
                (Kerb)</title>

                <tasksummary>
                    <para>This section demonstrates adding security to the web
                    service client that references the web service created in
                    the previous section. . This section also assumes that
                    Kerberos environment has already been setup on the system.
                    Refer to <xref linkend="ConfiguringKerberos"
                    xrefstyle="select:title" /> for more details.</para>

                    <para>To add security to the client that references this
                    web service, complete the following steps.</para>
                </tasksummary>

                <procedure>
                    <step>
                        <para><emphasis role="bold"> Create the client
                        application by following the steps described in <xref
                        linkend="wsit_example_with_nb-creating_wsit_client"
                        xrefstyle="select:title" />. </emphasis> <note>
                                <para>Whenever you make changes on the service,
                                refresh the client so that the client will pick up
                                the change. To refresh the client, right-click the
                                node for the Web Service Reference for the client,
                                and select Refresh Client.</para>
                            </note></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the node for the
                        web service client application,
                        CalculatorWSServletClient. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Web Service
                        References node. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Right-click on
                        CalculatorWSService, select Edit Web Service
                        Attributes. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold">Expand the Web Service
                        References node. </emphasis></para>
                    </step>

                    <step>
                        <para><emphasis role="bold"> In the Security section
                        of the Quality of Service tab, select Kerberos.
                        Specify Login Module, Service Principal and check the
                        box if credentials should be delegated.
                        </emphasis></para>

                        <para>Specify the Login Module to the one you created
                        in <emphasis>login.conf</emphasis> file for the client
                        in the section <xref linkend="ConfiguringKerberos"
                        xrefstyle="select:title" />, and the service principal
                        for which the ticket needs to be obtained.</para>

                        <para>Kerberos support in Metro security supports
                        credential delegation from client to service, such
                        that the server can initiate other security contexts
                        on behalf of the client. This feature is useful for
                        single sign-on in a multi-tier environment. Select the
                        checkbox for credential delegation.</para>

                        <note>
                            <para>At the service, we can obtain the delegated
                            credentials from the <link
                            xlink:href="https://docs.oracle.com/javase/8/docs/api/javax/security/auth/Subject.html">Subject</link>
                            of the authenticated user. The PrivateCredential set
                            of the will have the delegated client credentials
                            (as <link
                            xlink:href="https://docs.oracle.com/javase/8/docs/api/org/ietf/jgss/GSSCredential.html">GSSCredential</link>).
                            We can pass this GSSCredential to <link
                            xlink:href="https://docs.oracle.com/javase/8/docs/api/org/ietf/jgss/GSSManager.html">GSSManager</link>.createContext()
                            pretending to be the client.</para>

                            <para>Also, the PublicCredential set of the
                            authenticated Subject will always have <link
                            xlink:href="https://docs.oracle.com/javase/8/docs/api/javax/security/auth/kerberos/KerberosPrincipal.html">KerberosPrincipal</link>
                            corresponding to the client.</para>
                        </note>

                        <figure xml:id="kerberosClientConfig">
                            <title>Kerberos Configuration Attributes -
                            Client</title>

                            <mediaobject>
                                <imageobject>
                                    <imagedata contentdepth="100%"
                                               fileref="figures/kerberos_client_config.png"
                                               scalefit="1" width="100%"/>
                                </imageobject>

                                <textobject>
                                    <simpara>Screen shot of web service attributes
                                    editor page</simpara>
                                </textobject>
                            </mediaobject>
                        </figure>
                    </step>

                    <step>
                        <para><emphasis role="bold"> Right-click the
                        CalculatorWSServletClient node and select Run. The
                        result of the add operation will display in a browser
                        window. </emphasis> <note>
                                <para>If your client is a Java SE client, you need
                                to set the following system properties while running
                                your client code: <example>
                                        <programlisting linenumbering="unnumbered">-Djava.security.policy=${glassfish.home}/domains/domain1/config/server.policy

-Djava.security.auth.login.config=${glassfish.home}/domains/domain1/config/login.conf</programlisting>
                                    </example> If it is WebApp deployed on
                                glassfish, nothing else needs to be done.</para>
                            </note></para>
                    </step>
                </procedure>
            </task>
        </section>
    </section>
</chapter>
